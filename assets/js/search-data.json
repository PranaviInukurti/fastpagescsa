{
  
    
        "post0": {
            "title": "Fibonacci",
            "content": "For Loop Fibonacci . In this display, we see how firstTerm = 0 and secondTerm = 1 initially as the first two digits in the output of the Fibonacci series. We use the for loop to print the firstTerm and secondTerm, add these two terms to compute nextTerm, and assign whatever value we got to nextTerm. . int n = 10, firstTerm = 0, secondTerm = 1; //initializing &quot;firstTerm&quot; and &quot;secondTerm&quot; and displaying only the first 10 numbers of the sequence System.out.println(&quot;Fibonacci Series till &quot; + n + &quot; terms:&quot;); for (int i = 1; i &lt;= n; ++i) { System.out.print(firstTerm + &quot;, &quot;); // compute the next term int nextTerm = firstTerm + secondTerm; //computes the &quot;nextTerm by adding first two terms&quot; firstTerm = secondTerm; //makes the new &quot;firstTerm&quot; have the value of &quot;secondTerm&quot; secondTerm = nextTerm; // assigns the new &quot;secondTerm&quot; and the previously computed &quot;nextTerm&quot; } . Fibonacci Series till 10 terms: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, . While Loop Fibonacci . We can also create a fibonacci sequence with a while loop. The program is essentially the same as the previous program. Although both programs work well, using a for loop would be better since the number of iterations from 1 to n is known. . int i = 1, n = 10, firstTerm = 0, secondTerm = 1; //initializing &quot;firstTerm&quot; and &quot;secondTerm&quot; and displaying only the first 10 numbers of the sequence System.out.println(&quot;Fibonacci Series till &quot; + n + &quot; terms:&quot;); while (i &lt;= n) { System.out.print(firstTerm + &quot;, &quot;); int nextTerm = firstTerm + secondTerm; //computes the &quot;nextTerm by adding first two terms&quot; firstTerm = secondTerm; //makes the new &quot;firstTerm&quot; have the value of &quot;secondTerm&quot; secondTerm = nextTerm; // assigns the new &quot;secondTerm&quot; and the previously computed &quot;nextTerm&quot; i++; } . Fibonacci Series till 10 terms: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, . Recursive Fibonacci . To prevent repeating lines of code, we can use recursion to make our code and life simpler. The function takes an input number and checks for 0, 1, 2, returning 0, 1, 1 to start the Fibonacci sequence. When input n is &gt;=3, The function will call itself recursively and is done twice. . public static int fibonacciRecursion(int n){ if(n == 0){ // checking if input n = 0 and returning 0 if true return 0; } if(n == 1 || n == 2){ // checking if input n = 1, 2 and returning 1 for both if true return 1; } return fibonacciRecursion(n-2) + fibonacciRecursion(n-1); } int maxNumber = 10; // setting 10 as maximum number of terms displayed System.out.print(&quot;Fibonacci Series of &quot;+maxNumber+&quot; numbers: &quot;); for(int i = 0; i &lt; maxNumber; i++){ System.out.print(fibonacciRecursion(i) +&quot; &quot;); // adds one to maxNumber each time recursion happens } . Fibonacci Series of 10 numbers: 0 1 1 2 3 5 8 13 21 34 .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/09/24/fibonacci.html",
            "relUrl": "/jupyter/2022/09/24/fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "JavaScript Hacks",
            "content": "console.log(&quot;Welcome to Pranavi&#39;s Javascript&quot;); function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } // define a function to hold data for a Person function Person(name, grade, role) { this.name = name; this.grade = grade; this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, grade: this.grade, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;NA&quot;, &quot;Teacher&quot;); // object type is easy to work with in JavaScript // define a student Array of Person(s) var students = [ new Person(&quot;Pranavi&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Madhumita&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;John&quot;, &quot;Sophomor&quot;, &quot;Student&quot;), new Person(&quot;Shraddha&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Meena&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Bob&quot;, &quot;Junior&quot;, &quot;Student&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students scrumTeam = new Classroom(teacher, students); // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of scrumTeam.classroom for (var row in scrumTeam.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(scrumTeam._toHtml()); . Welcome to Pranavi&#39;s Javascript . NameGradeRole . Mr M | NA | Teacher | Pranavi | Senior | Student | Madhumita | Senior | Student | John | Sophomor | Student | Shraddha | Senior | Student | Meena | Senior | Student | Bob | Junior | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each index in the Array. | Return part create the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . Reference . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Anthony | tonyhieu | 2022 | Student | Bria | B-G101 | 2023 | Student | Allie | xiaoa0 | 2023 | Student | Tigran | Tigran7 | 2023 | Student | Rebecca | Rebecca-123 | 2023 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hacks . Objective of JavaScript is to produce frontend code. Working in Jupyter Notebooks could help in the process of visualizing design with short and interactive feedback. However, my hope is that you move to Fastpages and play with Frontend code in that environment and do the REAL thing. Here is my suggestion. . Design UI screens that are prototypes for your project. Design at least one screen with data from a structure (like Person data above), that is used to dynamically create HTML. As an alternative to HTML text method above, look at Jokes post and usage createElement... . const resultContainer = document.getElementById(&quot;result&quot;); ... build data table .... for (const row of data) { // tr for each row const tr = document.createElement(&quot;tr&quot;); // td for each column const joke = document.createElement(&quot;td&quot;); const haha = document.createElement(&quot;td&quot;); const boohoo = document.createElement(&quot;td&quot;); // data is specific to the API joke.innerHTML = row.joke; haha.innerHTML = row.haha; boohoo.innerHTML = row.boohoo; // this build td&#39;s into tr tr.appendChild(joke); tr.appendChild(haha); tr.appendChild(boohoo); // add HTML to container resultContainer.appendChild(tr); } . &lt;/div&gt; . . . . .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/09/19/TT-js_tutorial.html",
            "relUrl": "/jupyter/2022/09/19/TT-js_tutorial.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "FRQ 1 (Question 1)",
            "content": "Part a . public int scoreGuess (String guess) { int count = 0 for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length() * guess.length(); } . Part b . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/09/14/free-response-questions.html",
            "relUrl": "/jupyter/2022/09/14/free-response-questions.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Iteration Mini-Lab",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; Monkey 0&quot;, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; Monkey 1&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; Monkey 2&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; Monkey 3&quot;, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; Monkey 4&quot;, &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, { &quot; Monkey 5&quot;, &quot; (ಠ益ಠლ) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; int rowCount = 0; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int col = 0; col &lt; monkeys[rowCount].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } rowCount += 1; //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 6 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 Monkey 4 Monkey 5 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) (ಠ益ಠლ) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ _/ _ 5 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 Monkey 4 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... Monkey 0 Monkey 1 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... Monkey 0 ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/09/13/iteration.html",
            "relUrl": "/2022/09/13/iteration.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Focus and Habits",
            "content": "Focus and Habits . Blog Purpose . The purpose this blog is to illustrate my passion for all things biology while also showing off all of the programming skills I have learned and will learn throughout the course of this year. Although I know what the purpose of my blog is, I still wish to maintain some goals in order to keep on task and stay organized while building this blog. Some of the goals I have for this blog are: . maintain a minimalist, but aesthetic style for the entire blog formatting | make sure to have a realistic and maintainable organization to the blog | include projects and/or news that I find interesting that are going on in the biology field | have a separate place to keep all of my CSA projects and assignments | . Psychology and the Good Life . In this video, Laura Santos talks about the affects that Covid-19 had on us as a society and how she could see the direct impacts of this based on her observations of the students she saw on campus. . Takeaways from the Video . Get Social The Covid-19 hit many people hard because it stole one of the primary sources of happiness that we humans get our behavior from; a social and communicative environment. By engaging with more and more people, we are able to find more and more happiness as well. Afterall, the best coders are the happiest coders. | . | Give Thanks In order to maintain a stable and more positive well-being, we must constantly remind ourselves about all of the things we are grateful for. Although it might seem cheesy or corny at first, stopping to consider the good things in our life brightens our mindset and relays a more positive outlook on our life in general. This also allows us to step away from frustrations (helping our problem-solving skills as well). | . | Be In The Moment Focusing on the present is always able to make us feel better since it allows us to stop worrying about being so “busy” (something that is highly encourage in America and especially in our school). Even the simple practice of sitting with our more negative emotions puts into perspective that these feelings are temporary and don’t need to have so much control over our actions and behavior. | . | Rest And Move Sleep has always been beneficial to our bodily functions, but even more so for our mental stability. In order to maintain a sense of happiness, it is important to have a healthy and consistent sleep schedule. Even eight hours of rest sets a foundation that all happy habits rely on. | . | Be Kind Studies show that we get more happiness from doing nice things for other people than to ourselves. People who are more happy with their lives usually are the ones focusing more on bettering the lives of people less fortunate than themselves. The boost in mood that we get from random acts of kindness allows us to feel better without worrying about harming anyone else. | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/09/10/focus-and-habits.html",
            "relUrl": "/markdown/2022/09/10/focus-and-habits.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Docker Server",
            "content": "",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/09/10/docker-server.html",
            "relUrl": "/markdown/2022/09/10/docker-server.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Conditional Statements",
            "content": "If Statement . // will always print out true as the output since 20 will always be greater than 18 if (20 &gt; 18) { // condition in the parenthesis // the code that is executed if the condition is proved true (the return) System.out.println(&quot;True, 20 is greater than 18&quot;); } // if statements can also be used to test and/or compare variables int a = 20; int b = 18; if (a &gt; b) { System.out.println(&quot;True, variable a is greater than variable b&quot;); } . True, 20 is greater than 18 True, variable a is greater than variable b . Else Statement . // will always print out &quot;Good Bye&quot; since the time is 20 and 20 is always greater than 18, which means the condition is alwaysfalse int time = 20; if (time &lt; 18) { // the condition is in the parenthesis System.out.println(&quot;Good day.&quot;); // the return if the code executed is true under the condition } else { System.out.println(&quot;Good bye.&quot;); // the return if the code executed is false under the condition mentioned } . Good bye. . Else If Statement . // will always print out you won since 17 is greater than 10 and 15 int score = 17; if (score &lt; 10) { // in the parenthesis is the first condition System.out.println(&quot;You lost the game.&quot;); // what return follows if the executed code is true } else if (score &lt; 15) { // in the parenthesis is the second condition System.out.println(&quot;You might win the game.&quot;); // what return follows if the executed code is false for the first condition but true for the second condition } else { System.out.println(&quot;You won the game.&quot;); // what return follows if the executed code is false for both the first and second condition } . You won the game. . If-ElseIf Statements . The if statement is the first condition in the Java program that starts the management of the return. If this first condition in the if statement is true, the program will print out the statement coded inside it. If the condition is false, the execution moves on to the else condition and prints out the statement written inside this condition if it is true. If not, then the program repeats the process of moving on and checking the next condition until the code is executed. . int x; x=105; if (x &lt;= 10) { // condition 1 in the parenthesis System.out.println(&quot;X is less than or equal to 10, it is a pretty small number!&quot;); // if the value of x is less than or equal to 10, the system will return this statement } else if (x &lt;= 20) { // condition 2 in the parenthesis System.out.println(&quot;X is less than or equal to 20!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 20, the system will print out this statement } else if (x &lt;= 30) { // condition 3 in the parenthesis System.out.println(&quot;X is less than or equal to 30!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 30, the system will print out this statement } else if (x &lt;= 40) { // condition 4 in the parenthesis System.out.println(&quot;X is less than or equal to 40!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 40, the system will print out this statement } else if (x &lt;= 50) { // condition 5 in the parenthesis System.out.println(&quot;X is less than or equal to 50!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 50, the system will print out this statement } else if (x &lt;= 60) { // condition 6 in the parenthesis System.out.println(&quot;X is less than or equal to 60!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 60, the system will print out this statement } else { // if the value for x fails to meet all of the above conditions, it returns the statement below System.out.println(&quot;X is greater than 60, it&#39;s a pretty big number!&quot;); } . X is greater than 60, it&#39;s a pretty big number! . Switch-Case Statements . In switch-case statements, it is possible to write as many cases as you want, as long as they are all relevant to the problem. Break statements and default statements are both optional; but if you include the default statement in some place besides the end of the program, you must make sure that the break statement follows right after the default statement. Variables aren&#39;t allowed in these cases so the value for a case must be literal or constant. . int day = 5; String dayString; // This is the switch statement that includes what the data type is, in this case it is int. The value written above must be of the same data type to prevent any errors in the program switch (day) { // Case case 1: // this is case value 1 dayString = &quot;It&#39;s Monday today.&quot;; // this is the statement that prints out if the day value matches case #1 value break; // this is the break statement (THIS IS OPTIONAL, but I included it) // Case case 2: // this is case value 2 dayString = &quot;It&#39;s Tuesday today.&quot;; // this is the statement that prints out if the day value matches case #2 value break; // Case case 3: // this is case value 3 dayString = &quot;It&#39;s Wednesday today.&quot;; // this is the statement that prints out if the day value matches case #3 value break; // Case case 4: // this is case value 4 dayString = &quot;It&#39;s Thursday today.&quot;; // this is the statement that prints out if the day value matches case #4 value break; // Case case 5: // this is case value 5 dayString = &quot;It&#39;s Friday today.&quot;; // this is the statement that prints out if the day value matches case #5 value break; // Case case 6: // this is case value 6 dayString = &quot;It&#39;s Saturday today.&quot;; // this is the statement that prints out if the day value matches case #6 value break; // Case case 7: // this is case value 7 dayString = &quot;It&#39;s Sunday today.&quot;; // this is the statement that prints out if the day value matches case #7 value break; // we can continue to add as many case statements as we want (I stopped since there are only 7 days of the week) but make sure the number of cases is relevant to your program // This is the default case for when the case statements don&#39;t apply default: dayString = &quot;That&#39;s not a day bro.&quot;; // this is the statement that prints out if the day value doesn&#39;t match any of the case values } System.out.println(dayString); . It&#39;s Friday today. . De Morgan&#39;s Law . This law came after the man named Augustus De Morgan who developed it in the 1800s. The law states how to determine what the code will execute when negation rules are applied. For example, if a and b are both boolean values, then: . !(a &amp;&amp; b) is equivalent to !a || !b | !(a || b) is equivalent to !a &amp;&amp; !b | . The following negation conditions will also apply under De Morgan&#39;s law: . &lt; becomes &gt;= | &quot;&gt;&quot; becomes &lt;= | == becomes != | &lt;= becomes &gt; | = becomes &lt; | != becomes == | . String state = &quot;HI&quot;; // !(a || b) is equivalent to !a &amp;&amp; !b if (!(state.equals(&quot;TX&quot;) || state.equals(&quot;HI&quot;))) { System.out.println(&quot;The state is not Texas or Hawaii&quot;); } else { System.out.println(&quot;The state is either Texas or Hawaii&quot;); } // !(a &amp;&amp; b) is equivalent to !a || !b if (!(state.equals(&quot;TX&quot;) &amp;&amp; state.equals(&quot;HI&quot;))) { System.out.println(&quot;The state is either Texas or Hawaii&quot;); } else { System.out.println(&quot;The state is not Texas or Hawaii&quot;); } . The state is either Texas or Hawaii The state is either Texas or Hawaii .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/09/08/boolean.html",
            "relUrl": "/2022/09/08/boolean.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notes",
            "content": "Notes . Data Types . In data types, there are both Primitive Types in Java and Wrapper Classes. | To identify if a data type is primitive or not, you must check its capitalization. Primitive types will not be capitalized (for example: int, boolean, char, byte, long) whereas Wrapper Classes will be capitalized (for example: Int, Double, Boolean, String) | . | . Primitive Data Input . Uses the java scanner for console input | . Primitive Data Output . Descriptions of the mathematical operations combine to form result of the operation. | Primitive types usually aren’t alone and will have primitive type doubles and/or wrapper class double. | . Java Objects (Code.org Key Learnings) . can create a new object without using variables | import the java scanner along with whatever else you need to create certain functions | 2D array seen in java objects notebook with the color names in one column (1D), and the color codes in the other column (another 1D) | static means its not part of the object just in the class definition | . | static public void main(String[] args) used to drive a class | . | new Menu(); contains while loop within it to restart the menu until we quit the program with the 0 input | . | The extends feature in java is used to extend a class in order for the subclass (child) to inherit from the superclass (parent) | To create a new object: specify the class name, followed by the object name, and use the keyword new | use main.java | Use constructors to initialize objects and set some object attributes constructors can have as many parameters as needed | . | . Graphic User Interface (GUI) . can inherit properties from another | color is once again being randomized | seeing usage of frame.set, frame.add to show use of java objects dot notation is the referencing of object | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/08/28/fastpages-notes.html",
            "relUrl": "/markdown/2022/08/28/fastpages-notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Primitives Notebook",
            "content": "import java.util.Scanner; // defining the class public class Main { // use of wrapper class to use String to later print out the output public static void main(String[] args) { // use of primitives char operator; Double number1, number2, result; // create an object of Scanner class Scanner input = new Scanner(System.in); // ask users to enter operator System.out.println(&quot;Choose an operator: +, -, *, or /&quot;); operator = input.next().charAt(0); // ask users for input numbers System.out.println(&quot;Enter first number&quot;); number1 = input.nextDouble(); System.out.println(&quot;Enter second number&quot;); number2 = input.nextDouble(); switch (operator) { // performs addition between input numbers case &#39;+&#39;: result = number1 + number2; System.out.println(number1 + &quot; + &quot; + number2 + &quot; = &quot; + result); break; // performs subtraction between input numbers case &#39;-&#39;: result = number1 - number2; System.out.println(number1 + &quot; - &quot; + number2 + &quot; = &quot; + result); break; // performs multiplication between input numbers case &#39;*&#39;: result = number1 * number2; System.out.println(number1 + &quot; * &quot; + number2 + &quot; = &quot; + result); break; // performs division between input numbers case &#39;/&#39;: result = number1 / number2; System.out.println(number1 + &quot; / &quot; + number2 + &quot; = &quot; + result); break; default: System.out.println(&quot;Invalid operator!&quot;); break; } input.close(); } } // IJava run command Main.main(null); . Choose an operator: +, -, *, or / Enter first number Enter second number 5.0 + 6.0 = 11.0 .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/08/25/primitives.html",
            "relUrl": "/jupyter/2022/08/25/primitives.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Bash and Installation Checks",
            "content": "Python, Java, and Jupyter Check . python --version python2 --version java --version javac --version jupyter --version jupyter kernelspec list . Python 3.9.12 Python 2.7.18 openjdk 17.0.4 2022-07-19 OpenJDK Runtime Environment Temurin-17.0.4+8 (build 17.0.4+8) OpenJDK 64-Bit Server VM Temurin-17.0.4+8 (build 17.0.4+8, mixed mode, sharing) javac 17.0.4 Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/sri/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e bash /Users/sri/Library/Jupyter/kernels/bash java /Users/sri/Library/Jupyter/kernels/java javascript /Users/sri/Library/Jupyter/kernels/javascript python3 /Users/sri/opt/anaconda3/share/jupyter/kernels/python3 . Conda Installation Check . test=$(conda list | grep -c &quot;jupyter&quot;) if [ $test -gt 0 ]; then echo &quot;Conda and jupyter were correctly installed.&quot; else echo &quot;Conda and jupter were incorrectly installed.&quot; fi . Conda and jupyter were correctly installed. . Project Directory Checks . echo &quot;Creating a project directory and project&quot; cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... making a new directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Creating a project directory and project Directory /Users/sri/vscode exists. Directory /Users/sri/vscode/APCSP exists. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/08/25/bash-and-check.html",
            "relUrl": "/2022/08/25/bash-and-check.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Sprint 1 Hacks | Tools & Equipment",
            "content": "Hacks . Fastpages . Python Jupyter Notebook | Java Notebook | . . Java Project . . Initial Code Commit | . GitHub Insights . Insights for Fastpages | Insights for Java Project | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/08/22/sprint1hacks.html",
            "relUrl": "/markdown/2022/08/22/sprint1hacks.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Python Notebook",
            "content": "print(&quot;My Python NoteBook&quot;) . My Python NoteBook .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/08/18/python-notebook.html",
            "relUrl": "/2022/08/18/python-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello world!&quot;); . Hello world! .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/08/18/java-notebook.html",
            "relUrl": "/jupyter/2022/08/18/java-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pranaviinukurti.github.io/fastpagescsa/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pranaviinukurti.github.io/fastpagescsa/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}