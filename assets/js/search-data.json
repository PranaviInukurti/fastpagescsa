{
  
    
        "post0": {
            "title": "Data Types Notes and Hacks",
            "content": "Early Seed Award . Write a sample binary addition 1 + 1 = 10 . import java.util.Scanner; public class BinaryAdd{ public static void main(String[] args) { String b1,b2; Scanner sc= new Scanner(System.in); System.out.println(&quot;Enter 1st binary no. : &quot;) ; b1=sc.next(); System.out.println(&quot;Enter 2nd binary no. : &quot;) ; b2=sc.next(); int num1=Integer.parseInt(b1,2); int num2=Integer.parseInt(b2,2); int sum=num1+num2; System.out.println(&quot;Additon is : &quot;+Integer.toBinaryString(sum)); } } BinaryAdd.main(null); . Enter 1st binary no. : Enter 2nd binary no. : Additon is : 10 . Tech Talk Notes . Notes from Tuesday (3/7) Tech Talk on Data Types. . Primitive vs Reference Data Types . Two data types in java . primitive (int, long, boolean, double, char, byte, short, float) | reference (object, arrays) | . Primitive are stored directly in memory (local) whereas reference are stored as a reference to the memory location (local reference). . Wrapper Classes . Class that wraps the primitive type. We can use primitive types in collections (i.g. arraylists). Helps to convert int.s to objects and objects to int.s. Doesn&#39;t behave like a class though. . Autoboxing . Putting a box around int so it can be used in collections | similar to syntax for Int | . // Both of these create new objects Integer n = 5; // Auto-boxing, Integer n = new Integer(5); n += 5; // Auto-boxing, Integer n = new Integer(n + 5); . String isn&#39;t a primitive (only 1 value is a primitive) but it is a class (it is a group of values together). . Complex Data Structure . objects and arrays can include user (metadata, etc.) | . | wrapper class retains teh things of a regular class passes by value | . | class AtomicInteger passes by reference hash code is on every object (built in Java) unique signature (identification for the object) | point to memory location sometimes | . | . | swap IntbyReference made a class, added private attribute/property with a primitive, try to use it by reference | made a method to swap from low to high order | had some values - method does a swapping routine (uses a temp location to easily swap using a triangle swapping method) . | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2023/03/06/data-types-tri-3.html",
            "relUrl": "/jupyter/2023/03/06/data-types-tri-3.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "52 Question Practice MCQ Test",
            "content": "Q1 2D array bounds error . Topic 8.1, 8.2 Consider the following code segment. int[][] anArray = new int[10][8]; for (int j = 0; j &lt; 8; j++) { for (int k = 0; k &lt; 10; k++) { anArray[j][k] = 5; } } The code segment causes an ArrayIndexOutOfBoundsException to be thrown. How many elements in anArray will be set to 5 before the exception is thrown? We answered 64 but this would not thrown an ArrayIndexOutOfBoundsException. Instead, 8 elements in anArray will be set to 5 before an exception is thrown since anArray has 8 columns, numbered 0 through 7, inclusive. . Q3 2D array with multi-way selection . 2.B Topic 8.2 (Traversing 2D Arrays) Consider the following code segment. What are the contents of mat after the code segment has been executed? The correct answer would be D since the array created is 3 rows and 4 columns, not the other way around. . Q7 combine method . 2.C Topic 2.7, 4.3 Consider the following method. / Precondition: Strings one and two have the same length. */ public static String combine(String one, String two) { String res = &quot;&quot;; for (int k = 0; k &lt; one.length(); k++) { if (one.substring(k, k + 1).equals(two.substring(k, k + 1))) { res += one.substring(k, k + 1); } else { res += &quot;0&quot;; } } return res; }What is returned as a result of the call combine(&quot;10110&quot;, &quot;01100&quot;) ?** 00101 is incorrect since this would be the result if the method call was combine(&quot;10111&quot;, &quot;01101&quot;). Instead, the right answer is 00100 since the combine method compares corresponding substrings of length 1 from input strings one and two. If the substrings are the same, the substring is appended to res or else &quot;0&quot; is appended to res. . Q9 compSci substring . 2.C Topic 2.7 Consider the following code segment. String str = &quot;CompSci&quot;; System.out.println(str.substring(0, 3)); int num = str.length(); What is the value of num when the code segment is executed? str.length would give you the length of the string str, not the substring printed out so value of num is 7 not 3. (edited) 10:46 (here is my test corrections) . Q10 concat 0s and 8s . Consider the following code segment. . String str = &quot;0&quot;; str += str + 0 + 8; System.out.println(str); We answered that nothing is printed because you can&#39;t add ints to strings. However, the ints are interpreted as strings, so &quot;0008&quot; would be printed. . Q11 concat one two zee . Consider the following code segment. . int one = 1; int two = 2; String zee = &quot;Z&quot;; System.out.println(one + two + zee); What is printed as a result of executing the code segment? . We answered &quot;12Z&quot; because we thought the integers would be concatenated together much like strings are. However, the ints are actually added together, so the correct answer is &quot;3Z&quot; . Q12 . Create ArrayList of students, and add &quot;Alex&quot;, &quot;Bob&quot;, and &quot;Carl&quot; to them. Then, iterate over the array and set each value to alex. The print each value in the array. . We answered that nothing is printed because the first print statement will cause a runtime exception. However, in the first iteration, the set method will return the value that was originally at the index. During the first print statement, &quot;Alex Bob Carl&quot; will be printed. During the second print statement &quot;Alex Alex Alex&quot; will be printed. . Q13 containsArt method with 3 String parameters . Consider method which woould return true if at least one of the strings contains the substring art. Which would not work as intended. . We answered &quot;darkroom, cartoon, articulate&quot; because it doesn&#39;t end with art, meaning that the method will not pick it up. However, &quot;art&quot; doesn&#39;t have to be at the end of the string for it to be picked up. &quot;rattrapsimilartoday&quot; won&#39;t work because after concatenated, the program will detect an &quot;art&quot; between similar and today, even though none of the words actually contain &quot;art&quot; . Question 14 . Consider the following method, which is intended to return the number of columns in the two-dimensional array arr for which the sum of the elements in the column is greater than the parameter val. . public int countCols(int[][] arr, int val) { int count = 0; for (int col = 0; col &lt; arr[0].length; col++) // Line 5 { int sum = 0; for (int[] row : col) // Line 8 { sum += row[col]; // Line 10 } if (sum &gt; val) { count++; } } return count; } . The countCols method does not work as intended. Which of the following changes should be made so the method works as intended? . Answer . I chose answer option B which is incorrect since the enhanced for loop in line 8 is intended to traverse the rows of the two-dimensional array arr. Each row of arr is a one-dimensional array of int values, int[] row. The correct answer is C since two-dimensional arrays are stored as arrays of one-dimensional arrays. Line 8 is intended to assign to row, a one-dimensional array of int values, a single row of the two-dimensional array arr. The original version of line 8 attempts to assign a row of col, but col is not a two-dimensional array. . Question 15 . Consider the following method, which is intended to count the number of times the letter &quot;A&quot; appears in the string str. . public static int countA(String str) { int count = 0; while (str.length() &gt; 0) { int pos = str.indexOf(&quot;A&quot;); if (pos &gt;= 0) { count++; /* missing code */ } else { return count; } } return count; } . Which of the following should be used to replace / missing code / so that method countA will work as intended? . Answer . I chose &quot;str = str.substring(pos);&quot; as my answer which is incorrect since this statement would result in an infinite loop for any value of str containing one or more occurrences of the letter &quot;A&quot;, since str, following the execution of this statement, would still include the letter &quot;A&quot;. The correct answer is &quot;str = str.substring(pos + 1);&quot; since in the while loop, the variable pos is assigned the position of the first occurrence of &quot;A&quot; in str. If pos is less than zero, there are no more occurrences of &quot;A&quot; and the value of count is returned. Otherwise, the value of count is incremented and str is updated by removing the initial characters of str, up to and including the occurrence of &quot;A&quot; that was last included in count. The statement str = str.substring(pos + 1) accomplishes the update by selecting characters of str starting one character after pos. . Question 29 . Consider the code segment below. . int a = 1988; int b = 1990; String claim = &quot; that the world’s athletes &quot; + &quot;competed in Olympic Games in &quot;; String s = &quot;It is &quot; + true + claim + a + &quot; but &quot; + false + claim + b + &quot;.&quot;; System.out.println(s); . What, if anything, is printed when the code segment is executed? . Answer . I chose E which is incorrect since the code actually does compile without error. The correct answer is that &quot;It is true that the world’s athletes competed in Olympic Games in 1988 but false that the world’s athletes competed in Olympic Games in 1990.&quot; since the + operator concatenates the String literals, boolean values, String variables, and int variables in the order that they appear. . Question 32 . In the following code segment, assume that the ArrayList data has been initialized to contain the Integer values [4, 3, 4, 5, 3, 4]. . int j = 0; while (j &lt; data.size() - 1) { if (data.get(j) &gt; data.get(j + 1)) { System.out.print(data.get(j + 1) + &quot; &quot;); } j++; } . What, if anything, is printed as a result of executing the code segment? . Answer . I chose &quot;Nothing is printed because an IndexOutOfBoundsException occurs.&quot; as my answer which is incorrect since the code does actually run. The correct answer is &quot;3 3&quot; because the code segment iterates over the elements of data. Whenever an element is greater than the next element, the next element is printed. Because 4 is greater than the next element (3), 3 is printed. Because 5 is greater than the next element (3), another 3 is printed. . 35: . C is Correct. The code segment iterates over numbers from right-to-left and prints the values that are greater than their index. The element at index 3, which is 5, is greater than 3, so 3 is printed. The element at index 2, which is 4, is greater than 2, so 2 is printed. The element at index 1, which is 2, is greater than 1, so 1 is printed. The element at index 0, which is 0, is not greater than 0, so 0 is not printed. . 40 . Should be III only. C is correct. . 43 . C is Correct. The two parameter substring method returns the substring beginning at the first parameter and ending at the second parameter – 1. When word is assigned “compiler” and howFar is assigned 3, the value of word.substring(howFar + 1, word.length()) is “iler”. This is the substring of “compiler” beginning at 3 + 1 or 4 and ending at 8 – 1 or 7. The value of word.substring(0, howFar) is “com”. This is the substring of “compiler” beginning at 0 and ending at 2. The method returns “ilercom”. . 44 . D is Correct. The method assigns the shortest string that occurs in any element of arr between arr[n] and arr[arr.length - 1], inclusive, to result[n]. The shortest string found between arr[0] and arr[3] is &quot;of&quot;, so result[0] is assigned the value &quot;of&quot;. The shortest string found between arr[1] and arr[3] is also &quot;of&quot;, so result[1] is also assigned the value &quot;of&quot;. The same is true for the part of the array that begins at index 2 and ends at index 3, so result[2] is also assigned the value &quot;of&quot;. In the last iteration of the outer for loop, there are no values to consider after arr[3], so result[3] is assigned the value &quot;spring&quot;. . 45 . This would be the result if line 12 were executed once for each element of arr. . Line 12 is executed each time the variable sm is updated because a new smallest value is found. When j has the value 0, sm is updated for &quot;day&quot; and &quot;of&quot;. When j has the value 1, sm is updated for &quot;of&quot;. When j has the value 4, sm is updated for &quot;year&quot;. When j has any of the values 2, 3, or 5, sm is not updated. Line 12 is executed four times. . 48 . Option II is correct. The code segment uses an enhanced for loop to traverse the valueList array. The statement inside the loop calls the getNum method to access the num instance variable. . Option I is correct. The code segment uses a for loop to traverse the valueList array. The statement inside the loop calls the get method to access a Value object and then calls the getNum method to access the num instance variable. Option II is correct. The code segment uses an enhanced for loop to traverse the valueList array. The statement inside the loop calls the getNum method to access the num instance variable. Option III is incorrect. The code segment causes a compilation error because the getNum method must be called using the dot operator, not by passing the object reference as an argument. . 52 . This image would require the second set of nested loops to initialize row to val – 1, increment both row and col in each iteration inner loop (instead of row being decremented) and changing the condition on the inner loop to col &lt; 5 &amp;&amp; row &lt; 5. . The first set of nested for loops sets each element in board to “O”. The next for loop starts val at 0 and increments by 1 until val is 4, when val is 5 the loop terminates. When val is even, board is not updated, so nothing happens when val is 0. When val is 1, row is assigned 1 and col is assigned 0. The boolean condition in the while loop is true, so board[1][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 0 and board[0][1] is assigned “X”. Then col is incremented to 2 and row is decremented to -1 and the while loop terminates. When val is 2, nothing changes about board. When val is 3, row is assigned 3 and col is assigned 0. The boolean condition in the while loop is true, so board[3][0] is assigned “X”. Then col is incremented to 1 and row is decremented to 2 and board[2][1] is assigned “X”. Then col is incremented to 2 and row is decremented to 1 and board[1][2] is assigned “X”. Then col is incremented to 3 and row is decremented to 0 and board[0][3] is assigned “X”. Finally, col is incremented to 4 and row is decremented to -1 and the while loop terminates. When val is 4, nothing changes about board. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2023/01/31/52-question-quiz.html",
            "relUrl": "/jupyter/2023/01/31/52-question-quiz.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "66 Question Practice MCQ Test",
            "content": "I received a score of 55/66 on this practice multiple choice question test. This practice test was a really exciting experience and I learned a lot of how much I have learned this trimester and what I need to improve on based off of my mistakes. . Question 1 . Consider the following method. . public static void addOneToEverything(int[] numbers) { for (int j = 0; j &lt; numbers.length; j++) { numbers[j]++; } } . Which of the following code segments, if any, can be used to replace the body of the method so that numbers will contain the same values? . Answer . The answer option I chose was I only. This is wrong since the given method increases each element of the array numbers by 1. Code segment I does not work as intended. It assigns num a copy of each element of numbers. When num is incremented, it does not change the corresponding value stored in numbers. Code segment II does not compile, as the variable j has not been declared. Code segment III does not work as intended, as it attempts to use num as an index rather than as a copy of a value from the array. Therefore, the correct answer is that none of the code segments will return an equivalent result. . Question 30 . In the following code segment, assume that the ArrayList numList has been properly declared and initialized to contain the Integer values [1, 2, 2, 3]. The code segment is intended to insert the Integer value val in numList so that numList will remain in ascending order. The code segment does not work as intended in all cases. . int index = 0; while (val &gt; numList.get(index)) { index++; } numList.add(index, val); . For which of the following values of val will the code segment not work as intended? . Answer . The answer option I chose was 3. This code segment correctly inserts 3 in numList to produce [1, 2, 2, 3, 3]. 4 would be the correct answer since val is greater than every element in numList, index will continue to increase until it is 4. Once index is 4, an IndexOutOfBoundsException will occur because there is no element at index 4. . Question 32 . Consider the following instance variable nums and method findLongest with line numbers added for reference. Method findLongest is intended to find the longest consecutive block of the value target occurring in the array nums; however, findLongest does not work as intended. . For example, if the array nums contains the values [7, 10, 10, 15, 15, 15, 15, 10,10, 10, 15, 10, 10], the call findLongest (10) should return 3, the length of the longest consecutive block of 10s. . . Which of the following changes should be made so that method findLongest will work as intended? . Answer . I chose the answer: Insert the statement lenCount = 0 between lines 11 and 12. This was actually a simple mistake of choosing the wrong answer option on accident. The correct answer would be to Insert the statement lenCount = 0 between lines 12 and 13. . Question 36 . Consider the following declarations. . Actor a = new Actor(); Bug b = new Bug(); Rock r = new Rock(); Critter c = new Critter(); . Consider the following lines of code. . int dir1 = c.getDirection(); int dir2 = a.getDirection(); int dir3 = b.getDirection(); ArrayList&lt;Location&gt; rLoc = r.getMoveLocations(); ArrayList&lt;Location&gt; cLoc = c.getMoveLocations(); . Which of the lines of code above will cause a compile time error? . Answer . I chose the answer option, Line 1 only which is incorrect since that line is merely getting the Direction method. However, Line 4 would be the correct answer option since it is the line that is trying to get the location of all of the new rocks. . Question 37 . Consider the following code segment. . int num = /* initial value not shown */; boolean b1 = true; if (num &gt; 0) { if (num &gt;= 100) { b1 = false; } } else { if (num &gt;= -100) { b1 = false; } } . Which of the following statements assigns the same value to b2 as the code segment assigns to b1 for all values of num ? . Answer . I chose the answer that said boolean b2 = (num &lt; -100) || (num &gt; 100) which is incorrect since the statement assigns a different value to b2 than the code segment assigns to b1 when num is between 0 and 100, exclusive, or when num is greater than 100. The correct answer option is boolean b2 = (num &lt; -100) || (num &gt; 0 &amp;&amp; num &lt; 100) since the body of the first if clause in the code segment, b1 retains the value true if num is between 0 and 100, exclusive. In the body of the else clause, b1 retains the value true if num is less than -100. The statement assigns true to b2 if num is less than -100 or between 0 and 100, exclusive. . Question 49 . Consider the following method. . public static void whatIsIt(int a, int b) { if ((a &lt; b) &amp;&amp; (a &gt; 0)) { System.out.println(&quot;W&quot;); } else if (a == b) { if (b &gt; 0) { System.out.println(&quot;X&quot;); } else if (b &lt; 0) { System.out.println(&quot;Y&quot;); } else if ((a == b) &amp;&amp; (a == 0)) { System.out.println(&quot;Z&quot;); } } } . Which of the following method calls will cause &quot;W&quot; to be printed? . I. whatIsIt(10, 10) II. whatIsIt(-5, 5) III. whatIsIt(7, 10) . Answer . I chose the answer option II and III which is incorrect since in option II, &quot;W&quot; is not printed because the expression a &gt; 0 evaluates to false. The correct answer is III only since option I, &quot;W&quot; is not printed because the expression a &lt; b evaluates to false. In option II, &quot;W&quot; is not printed because the expression a &gt; 0 evaluates to false. In option III, both a &lt; b and a &gt; 0 evaluate to true, so &quot;W&quot; is printed. . Question 51 . Consider the following method, which returns an int based on its parameter x. . public static int puzzle(int x) { if (x &gt; 20) { x -= 2; } else if (x % 2 == 0) // Line 7 { x += 4; } return x; } . Consider a modification to the method that eliminates the else from line 7 so that line 7 becomes . if (x % 2 == 0) // Modified line 7 . For which of the following values of x would the return values of the original method and the modified method differ? . Answer . I chose the answer that includes 5 which is incorrect because when x has the value 5, both versions of the method return 5. The correct answer is 22 because in the original method, the call puzzle(22) returns 20. The first condition evaluates to true, so x is decreased by two and 20 is returned. In the original method, when the condition in the if statement evaluates to true, the second condition, in the else if clause, is not evaluated. For the modified method, the first condition still evaluates to true and x is decreased by two. But now the second condition appears in an if statement, instead of in an else if clause, so the second condition is evaluated, found to be true, and x is increased by four. This results in the value 24 being returned. . Question 53 . Consider the following two methods, which are intended to return the same values when they are called with the same positive integer parameter n. . public static int mystery1(int n) { if (n &gt; 1) { return 5 + mystery1(n - 1); } else { return 1; } } public static int mystery2(int n) { int total = 0; int x = 1; while (x &lt; n) { total += 5; x++; } return total; } . Which, if any, of the following changes to mystery2 is required so that the two methods work as intended? . Answer . I chose the condition in the while loop header should be x &lt; n - 1 which is incorrect since that would change the way that the while loop functions. The correct answer is to initialize the variable total to 1. . Question 55 . Assume that a and b are variables of type int. The expression . !(a &lt; b) &amp;&amp; !(a &gt; b) . is equivalent to which of the following? . Answer . I chose the answer option a != b which is incorrect since a == b would be the correct answer option. . Question 56 . Consider the following data field and method. The method removeDups is intended to remove all adjacent duplicate numbers from myData, but does not work as intended. . private ArrayList myData; public void removeDups () { int k = 1; while (k &lt; myData.size()) { if (myData.get(k).equals(myData.get(k - 1))) { myData.remove(k); } k++; } } . For example, if myData has the values 3 3 4 4 4 8 7 7 7, after calling removeDups, myData should have the values 3 4 8 7. Which of the following best describes how to fix the error so that removeDups works as intended? . Answer . I chose the answer option &quot;k should be initialized to 0 at the beginning of the method&quot; which is incorrect since there should actually be an else before the statement k++. . Question 66 . Consider the following code segment. . for (int j = 1; j &lt; 10; j += 2) { System.out.print(j); } . Which of the following code segments will produce the same output as the code segment above? . Answer . I chose answer option A which is incorrect since the given code segment prints 13579 and this option&#39;s code segment prints 357911. In this code segment, j is incremented before it is printed. The correct answer option is B since in the given for loop, j is initially 1 and increases by 2 repeatedly as long as it is less than 10. In this while loop, j is initially 1 and increases by 2 repeatedly while it is less than 10. Both code segments produce the output 13579. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2023/01/23/66-question-quiz.html",
            "relUrl": "/jupyter/2023/01/23/66-question-quiz.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 9 Homework",
            "content": "WorldCup SuperClass . Create a world cup superclass with properties of your choice and subclasses for five teams which inherits those properties and have a constructor for one of those subclasses. . public class WorldCup { public String game; public String team1; public String team2; public int score; public WorldCup (String game, String team1, String team2, int score){ this.game = game; this.team1=team1; this.team2=team2; this.score=score; } public String getTeam1(){ return team1; } public String getTeam2(){ return team2; } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;&quot;); } public void printInfo() { System.out.println(&quot;Team game: &quot; + this.game); System.out.println(&quot;Team 1: &quot; + this.team1); System.out.println(&quot;Team 2: &quot; + this.team2); System.out.println(&quot;Score: &quot; + this.score); stats(); } } public class Portugal extends WorldCup { public Portugal(String game, String team1, String team2, int score){ super(game, team1, team2, score); } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;Portugal pass accuracy: 71%&quot;); } } public class Morocco extends WorldCup { public Morocco(String game, String team1, String team2, int score){ super(game, team1, team2, score); } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;Morocco pass accuracy: 85%&quot;); } } public class England extends WorldCup { public England(String game, String team1, String team2, int score){ super(game, team1, team2, score); } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;England pass accuracy: 71%&quot;); } } public class France extends WorldCup { public France(String game, String team1, String team2, int score){ super(game, team1, team2, score); } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;France pass accuracy: 85%&quot;); } } public class Argentina extends WorldCup { public Argentina(String game, String team1, String team2, int score){ super(game, team1, team2, score); } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;Argentina pass accuracy: 71%&quot;); } } public class Croatia extends WorldCup { public Croatia(String game, String team1, String team2, int score){ super(game, team1, team2, score); } public void score() { this.score += 1; } public void stats(){ System.out.println(&quot;Croatia pass accuracy: 85%&quot;); } } WorldCup Portugal = new Portugal(&quot;Game 1&quot;, &quot;Portugal&quot;, &quot;Morocco&quot;, 0); WorldCup Morocco = new Morocco(&quot;Game 2&quot;, &quot;Portugal&quot;, &quot;Morocco&quot;, 1); WorldCup England = new England(&quot;Game 3&quot;, &quot;England&quot;, &quot;France&quot;, 0); WorldCup France = new France(&quot;Game 4&quot;, &quot;England&quot;, &quot;France&quot;, 1); WorldCup Argentina = new Argentina(&quot;Game 5&quot;, &quot;Argentina&quot;, &quot;Croatia&quot;, 0); WorldCup Croatia = new Croatia(&quot;Game 6&quot;, &quot;Argentina&quot;, &quot;Croatia&quot;, 1); WorldCup.printInfo(); Portugal.printInfo(); Morocco.printInfo(); England.printInfo(); France.printInfo(); Argentina.printInfo(); Croatia.printInfo(); . Team game: Game 1 Team 1: Portugal Team 2: Morocco Score: 1 Team game: Game 1 Team 1: Portugal Team 2: Morocco Score: 0 Portugal pass accuracy: 71% Team game: Game 2 Team 1: Portugal Team 2: Morocco Score: 1 Morocco pass accuracy: 85% Team game: Game 3 Team 1: England Team 2: France Score: 0 England pass accuracy: 71% Team game: Game 4 Team 1: England Team 2: France Score: 1 France pass accuracy: 85% Team game: Game 5 Team 1: Argentina Team 2: Croatia Score: 0 Argentina pass accuracy: 71% Team game: Game 6 Team 1: Argentina Team 2: Croatia Score: 1 Croatia pass accuracy: 85% . Person and Student Homework . Add a getAge method in the Person super class, create a new subclass Student with additional members and a new subclass Teacher with additional members, override the toString method using the @Override to print a Student and teacher object with new members, and print the student and teacher. . public class Person { protected String name; protected String birthday; public Person (String name, String birthday) { this.name = name; this.birthday = birthday; } public String getName() { return name; } // method for getting age based on their birthday year subtracted from this year public int getAge() { return 2022 - Integer.parseInt(birthday); } // using override for toString method @Override public String toString() { return &quot;Person (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;)&quot;; } } public class Student extends Person { private int grade; private double gpa; // student subclass with the personalized aspects public Student (String name, String birthday, int grade, double gpa) { super(name, birthday); this.grade = grade; this.gpa = gpa; } // tells the student&#39;s current gpa public double getGPA() { return gpa; } // tells the student&#39;s grade level public int getGrade() { return grade; } // using override to print student out @Override public String toString() { return &quot;Student (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;, weighted gpa: &quot; + gpa + &quot;, grade: &quot; + grade + &quot;)&quot;; } } public class Teacher extends Person { private String subject; private int yearsTaught; private String degree; // teacher subclass with personalized aspects public Teacher (String name, String birthday, String subject, int yearsTaught) { super(name, birthday); this.subject = subject; this.yearsTaught = yearsTaught; } // tells the subject teacher is currently teaching public String getSubject() { return subject; } // tells the number of years that the teacher has been teaching for public int getYears() { return yearsTaught; } // using override to print teacher out @Override public String toString() { return &quot;Teacher (name: &quot; + name + &quot;, birthday: &quot; + birthday + &quot;, subject teaching: &quot; + subject + &quot;, number of years teaching: &quot; + yearsTaught; } } // printing the person, student, and teacher along with their respective information Person tom = new Person(&quot;Tom Cruise&quot;, &quot;1962&quot;); System.out.println(tom.toString()); Person pranavi = new Student(&quot;Pranavi Inukurti&quot;, &quot;2005&quot;, 12, 4.1); System.out.println(pranavi.toString()); Person john = new Teacher(&quot;John Mortensen&quot;, &quot;1959&quot;, &quot;Computer Science&quot;, 22); System.out.println(john.toString()); . Person (name: Tom Cruise, birthday: 1962) Student (name: Pranavi Inukurti, birthday: 2005, weighted gpa: 4.1, grade: 12) Teacher (name: John Mortensen, birthday: 1959, subject teaching: Computer Science, number of years teaching: 22 .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/12/12/unit-9-hw.html",
            "relUrl": "/jupyter/2022/12/12/unit-9-hw.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 8 Homework",
            "content": "Homework Hacks . Create a class for 2D array learning, a new object to test out each method in the main function, and methods to initialize a 2D array with arbitrary values, reverse the 2D array and print out the values, that ask for the input of a position and it returns the corresponding value, and that multiply each value in a row and then adds all the products together. . // class for 2D array public class twoDArray { private int[][] numbers; public twoDArray(){ numbers = new int [3][5]; this.numbers = numbers; } // method for initializing 2D array with arbitrary values public void initValues(){ System.out.println(&quot;Initial Array&quot;); Random random = new Random(); for(int i = 0; i &lt; numbers.length;i++){ for(int j = 0; j &lt;numbers[i].length;j++){ numbers[i][j] = random.nextInt(11 - 1) + 1; System.out.print(numbers[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } } // method for reversing 2D array and printing out values public void revArray() { System.out.println(&quot; nReversed Array&quot;); for(int i = numbers.length-1;i&gt;=0;i--){ for(int j = 0; j &lt;numbers[i].length;j++){ System.out.print(numbers[i][j]+&quot; &quot;); } System.out.println(&quot; &quot;); } System.out.println(&quot; n&quot;); } // method that multiplies each value in a row and then adds all the products together public void productSum() { int finalProduct = 1; for(int i = 0;i&lt;numbers.length;i++){ int product = 1; for(int j = 0; j &lt; numbers[i].length;j++){ product = product * numbers[i][j]; } System.out.print(&quot;When row is: &quot; + i + &quot;, product is: &quot; + product); System.out.println(&quot; &quot;); finalProduct += product; } System.out.print(&quot;The sum of all of the products is: &quot; + finalProduct); System.out.println(&quot; n&quot;); } // method that asks for the input of a position and it returns the corresponding value public void outputArrayValue() { Scanner myObj = new Scanner(System.in); System.out.println(&quot;Input a row number&quot;); String arrayValue1 = myObj.nextLine(); System.out.println(arrayValue1); int numArrayValue1 = Integer.parseInt(arrayValue1); System.out.println(&quot;Input a column number&quot;); String arrayValue2 = myObj.nextLine(); System.out.println(arrayValue2); int numArrayValue2 = Integer.parseInt(arrayValue2); System.out.println(&quot;At that position in the array, the value is: &quot; + numbers[numArrayValue1][numArrayValue2]); System.out.println(&quot; n&quot;); } } // new object to test out each method in the main function twoDArray anArray = new twoDArray(); anArray.initValues(); anArray.revArray(); anArray.outputArrayValue(); anArray.productSum(); . Initial Array 2 1 1 9 4 5 2 10 7 10 2 8 2 8 7 Reversed Array 2 8 2 8 7 5 2 10 7 10 2 1 1 9 4 Input a row number 1 Input a column number 2 At that position in the array, the value is: 10 When row is: 0, product is: 72 When row is: 1, product is: 7000 When row is: 2, product is: 1792 The sum of all of the products is: 8865 .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/12/06/unit-8-hw.html",
            "relUrl": "/jupyter/2022/12/06/unit-8-hw.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 7 Homework",
            "content": "Hack 1 - Descending and Swap . Sort an ArrayList in descending order and swap the first and last elements. . import java.util.ArrayList; import java.util.Collections; ArrayList&lt;String&gt; songs = new ArrayList&lt;&gt;(); songs.add(&quot;Shake It Off&quot;); songs.add(&quot;In Da Club&quot;); songs.add(&quot;Party In The USA&quot;); songs.add(&quot;I Ain&#39;t Worried&quot;); songs.add(&quot;One Dance&quot;); songs.add(&quot;I Wanna Benz&quot;); public void print(ArrayList&lt;String&gt; songs){ for (String str : songs){ System.out.println(str); } } // shows descending order System.out.println(&quot;&quot;); Collections.sort(songs, Collections.reverseOrder()); System.out.println(&quot;Song&#39;s Descending Order: &quot;); print(songs); System.out.println(); System.out.println(&quot;&quot;); // swaps 1st and 6th list items System.out.println(&quot;Swap 1st &amp; Last Element: &quot;); String temp = songs.get(0); songs.remove(0); songs.add(0,songs.get(songs.size()-1)); songs.remove(songs.size()-1); songs.add(songs.size(), temp); print(songs); . Song&#39;s Descending Order: Shake It Off Party In The USA One Dance In Da Club I Wanna Benz I Ain&#39;t Worried Swap 1st &amp; Last Element: I Ain&#39;t Worried Party In The USA One Dance In Da Club I Wanna Benz Shake It Off . Hack 3 - Ascending, Descending, Neither . Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither. . import java.util.ArrayList; public class ArrayChecker { // Here is the code to check if array list is sorted in Ascending order or not boolean checkSorting(ArrayList&lt; String &gt; arraylist){ boolean isSorted=true; for(int i=1;i &lt; arraylist.size();i++){ if(arraylist.get(i-1).compareTo(arraylist.get(i)) &gt; 0){ isSorted= false; break; } } return isSorted; } public static void main(String[] args) { ArrayList &lt; String &gt; al=new ArrayList &lt; String &gt;(); al.add(&quot;1, 2, 3, 4, 5, 6&quot;); System.out.println(al); ArrayChecker alDemo=new ArrayChecker(); System.out.println(&quot;Is List Ascending: &quot;+alDemo.checkSorting(al)); al.remove(&quot;1, 2, 3, 4, 5, 6&quot;); al.add(&quot;6, 5, 4, 3, 2, 1&quot;); System.out.println(al); ArrayChecker alDemo1=new ArrayChecker(); System.out.println(&quot;Is List Descending: &quot;+alDemo1.checkSorting(al)); al.remove(&quot;6, 5, 4, 3, 2, 1&quot;); } } ArrayChecker.main(null); . [1, 2, 3, 4, 5, 6] Is List Ascending: true [6, 5, 4, 3, 2, 1] Is List Descending: true .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/12/04/unit-7-hw.html",
            "relUrl": "/jupyter/2022/12/04/unit-7-hw.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Week of 11-28, ArrayList and Vocab",
            "content": ". Trimester 1 Notes . Casting Notes . Casting is when programmers are trying to assign a value from one data type to another data type Widening Casting is when smaller data types convert to bigger data types Happens automatically | . | Narrowing Casting is when larger data types convert to smaller data types Happens manually | . | . | The chain of smallest to biggest data types is byte, short, char, int, long, float, double | . | . Widening Casting . public class Main { public static void main(String[] args) { int myInt = 9; double myDouble = myInt; // Automatic casting: int to double System.out.println(myInt); // Outputs 9 System.out.println(myDouble); // Outputs 9.0 } } Main.main(null); . 9 9.0 . Narrowing Casting . public class Main { public static void main(String[] args) { double myDouble = 9.78d; int myInt = (int) myDouble; // Manual casting: double to int System.out.println(myDouble); // Outputs 9.78 System.out.println(myInt); // Outputs 9 } } Main.main(null); . 9.78 9 . Casting with Division . Java typically assumes that an integer result is appropriate when doing division with integers However, using a mixture of integers (int) and floating point numbers (double), Java assumes that a double result is appropriate To do this though, one must use casting Cast one of the integers to a double using (double), changing the “shape” or the data type of the variable | . | . | . | . public class Test { public static void main(String[] args) { // automatic casting here System.out.println(1 / 3); System.out.println(1.0 / 3); System.out.println(1 / 3.0); // manual casting here System.out.println((float) 1 / 3); } } Test.main(null); . 0 0.3333333333333333 0.3333333333333333 0.33333334 . Casting with Truncating . Truncating a number essentially means to round it In division, using truncating would mean to remove the amount of decimal or fractional numbers to create an intended result | . | . import java.io.*; public class TrunctionExample1 { //driver code public static void main(String args[]) { //the number to truncate double num = 19.87874548973101; //number of digits to take after decimal int digits = 5; System.out.println(&quot;The number before truncation is: &quot;+num); //calling user-defined method that truncates a number truncateNumber(num, digits); } //user-defined method to truncate a number static void truncateNumber(double n, int decimalplace) { //moves the decimal to the right n = n* Math.pow(10, decimalplace); //determines the floor value n = Math.floor(n); //dividing the floor value by 10 to the power decimalplace n = n / Math.pow(10, decimalplace); //prints the number after truncation System.out.println(&quot;The number after truncation is: &quot;+n); } } TrunctionExample1.main(null); . The number before truncation is: 19.87874548973101 The number after truncation is: 19.87874 . Wrapper Classes . Is essentially the practice of using primitive data types as objects | You can use certain methods to get information about the specific object Methods like the following are used to get the value associated with the respective wrapper object intValue(), byteValue(), shortValue(), longValue(), floatValue(), doubleValue(), charValue(), booleanValue() . | . public class Main { public static void main(String[] args) { Integer myInt = 5; Double myDouble = 5.99; Character myChar = &#39;A&#39;; System.out.println(myInt.intValue()); System.out.println(myDouble.doubleValue()); System.out.println(myChar.charValue()); } } Main.main(null); . 5 5.99 A . The to String() method can be used when converting wrapper object to strings The length() outputs the length of the &quot;string&quot; when converting an int to a string | . | . public class Main { public static void main(String[] args) { Integer myInt = 100; String myString = myInt.toString(); System.out.println(myString.length()); } } Main.main(null); . 3 . Concatenation . Combining two or more strings to form a new string Happens by appending the next string to the end of the previous strings | In Java, two strings can be concatenated by using the + or += operator, or the concat() method in the java.lang.String class | . | Example H E L L O + W O R L D becomes | H E L L O W O R L D | . | . Concatenation Using + Operator . class HelloWorld { public static void main( String args[] ) { String first = &quot;Hello&quot;; String second = &quot;World&quot;; // way 1 String third = first + second; System.out.println(third); // way 2 first += second; System.out.println(first); } } HelloWorld.main(null); . HelloWorld HelloWorld . Concatenation Using Concat Method . class HelloWorld { public static void main( String args[] ) { String first = &quot;Hello&quot;; String second = &quot;World&quot;; String third = first.concat(second); System.out.println(third); } } HelloWorld.main(null); . HelloWorld . Java Math Class.random . The java.lang.Math.random() is used to return a pseudorandom double type number that is &gt;= 0.0 and &lt; 1.0 Random number always between 0 and 1 | . | . public class MathClass { public static void main(String[] args) { // generate random number double a = Math.random(); double b = Math.random(); // Output is different every time this code is executed System.out.println(a); System.out.println(b); } } MathClass.main(null); . 0.22257006893484987 0.6831401769648252 . Ranged Results . For specific range of values, you have to multiply the returned value with the magnitude of the range To get the random number between 0 to 20, the resultant address has to be multiplied by 20 to get the desired result | . | . public class RangedResult { public static void main(String[] args) { // Generate random number between 0 to 20 double a = Math.random() * 20; double b = Math.random() * 20; // Output is different every time this code is executed System.out.println(a); System.out.println(b); } } RangedResult.main(null); . 5.542133912557907 4.062478517038832 . Compound Boolean Expressions . Three compound boolean logical operators Operand1 must be a boolean variable and op may be &amp;, |, or ^ | Java does not have any operators like &amp;&amp;= and ||= | . | Compound Boolean Logical Assignment Operators are used in the form operand1 op= operand2 which essentially means operand1 = operand1 op operand2 | For &amp;= operator, if both operands evaluate to true, &amp;= returns true. Otherwise, it returns false. boolean b = true; b &amp;= true; // Assigns true to b b &amp;= false; // Assigns false to b . | . public class Permission { public static void main(String[] args) { boolean cleanedRoom = true; boolean didHomework = false; if (cleanedRoom &amp;&amp; didHomework) { System.out.println(&quot;You can go out&quot;); } else { System.out.println(&quot;No, you can&#39;t go out&quot;); } } } Permission.main(null); . No, you can&#39;t go out . Truth Tables . Shows result for P &amp;&amp; Q when P and Q are both boolean expressions (can be true or false) An expression involving logical operators like (P &amp;&amp; Q) evaluates to a Boolean value, true or false | P &amp;&amp; Q is only true if both P and Q are true. | . | . . Shows the result for P || Q when P and Q are both boolean expressions P || Q is true if either P or Q is true Also true when both of them are true | . | . | . . De Morgan&#39;s Law . This law came after the man named Augustus De Morgan who developed it in the 1800s. The law states how to determine what the code will execute when negation rules are applied. For example, if a and b are both boolean values, then: | !(a &amp;&amp; b) is equivalent to !a || !b | !(a || b) is equivalent to !a &amp;&amp; !b | . The following negation conditions will also apply under De Morgan&#39;s law: . &lt; becomes &gt;= | &quot;&gt;&quot; becomes &lt;= | == becomes != | &lt;= becomes &gt; | = becomes &lt; | != becomes == | . String state = &quot;HI&quot;; // !(a || b) is equivalent to !a &amp;&amp; !b if (!(state.equals(&quot;TX&quot;) || state.equals(&quot;HI&quot;))) { System.out.println(&quot;The state is not Texas or Hawaii&quot;); } else { System.out.println(&quot;The state is either Texas or Hawaii&quot;); } // !(a &amp;&amp; b) is equivalent to !a || !b if (!(state.equals(&quot;TX&quot;) &amp;&amp; state.equals(&quot;HI&quot;))) { System.out.println(&quot;The state is either Texas or Hawaii&quot;); } else { System.out.println(&quot;The state is not Texas or Hawaii&quot;); } . The state is either Texas or Hawaii The state is either Texas or Hawaii . Comparing in Java . Comparing Numbers . To check two numbers for equality in Java, we can use the Equals() method as well as the == operator First, you must set the Integers Integer val1 = new Integer(5); Integer val2 = new Integer(5); . | . | Next check their equality using the == operator (val1 == val2) . | . public class CompareNum { public static void main( String args[] ) { Integer val1 = new Integer(5); Integer val2 = new Integer(5); Integer val3 = new Integer(10); System.out.println(&quot;Integer 1 = &quot;+val1); System.out.println(&quot;Integer 2 = &quot;+val2); System.out.println(&quot;Integer 3 = &quot;+val3); System.out.println(&quot;val1 is equal to val2 = &quot;+(val1 == val2)); System.out.println(&quot;val2 is not equal to val3 = &quot;+(val2 != val3)); } } CompareNum.main(null); . Integer 1 = 5 Integer 2 = 5 Integer 3 = 10 val1 is equal to val2 = false val2 is not equal to val3 = true . Comparing Strings . There are five different ways to compare strings in Java Using user-defined function | Using String.equals() | Using String.equalsIgnoreCase() | Using Objects.equals() | Using String.compareTo() | . | In general both equals() and == operator both are used to compare objects to check equality There are some differences between the two one is method and other is operator | == operators is for reference comparison and .equals() method is for content comparison | . | Essentially, == checks if both objects point to the same memory location whereas .equals() actually compares the values of two objects | . | . Comparing Objects . You can compare objects in Java by using the == and != operators, which tells if two Java objects are the same or not This also works when comparing a primitive value with its wrapper type counterpart Integer a = new Integer(1); assertThat(1 == a).isTrue(); . | . | The equals method can also be used to compare objects The methods returns true if both objects are the same and false if the two objects are different | . | . For, Enhanced For, While, and Nested Loops . For Loops . simplifies code by allowing it to repeat itself | while loops have two portions: the boolean expression and the brackets that have some code in them the boolean expression is checked before the loop starts every time the loop ends and is about to start anew | . | changes conditions again and again until returns false and ends the while loop | iterates over numerous elements | . | for loops has three portions: initialization, test condition, and change for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . | when the loop condition is false, execution will continue at the next statement after the body of the loop. | strings can also be manipulated through the use of iteration String name = &quot;CodeCodeCode&quot;; | . for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . While Loops . The while loop loops through a block of code as long as a specified condition is true int i = 0; while (i &lt; 5) { System.out.println(i); i++; } . | . Do While Loops . A variant of the while loop Executes the code block once, before checking if the condition is true, then it repeats the loop as long as the condition is true int i = 0; do { System.out.println(i); i++; } while (i &lt; 5); . | . | . Enhanced For Loops . there are also nested while loops aren&#39;t very practical though | . | for each loops are similar to for loops three portions to it array, item, dataType | . | . | . public class ForEachLoops { public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } } } ForEachLoops.main(null); . 2 10 5 12 . Nested Loops . nested iteration is where there is a loop within a loop similar to nested conditionals for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . | . | . Creating a Class . There are a couple of steps to writing a class make sure to use the class keyword to create a class in the start | To create an object of Main, specify the class name, followed by the object name, and use the keyword new Constructors are used to create new objects | . | . | Instance variables are used to store any information regarding objects created in a class | Methods are used to show programs a new command they must run specific methods are used to perform specific tasks in a class | . | . Naming Conventions . For variables, the Java naming convention is to always start with a lowercase letter and then capitalize the first letter of every subsequent word Variables can&#39;t contain white space, so variables made from compound words are to be written with a lower camel case syntax firstName | timeToFirstLoad | index | . | . | . . Constructors . A constructor in Java is a special method that is used to initialize objects Called when an object of a class is created | Used to set initial values for object attributes | . | . public class Main { int x; // Create a class attribute // Create a class constructor for the Main class public Main() { x = 5; // Set the initial value for the class attribute x } public static void main(String[] args) { Main myObj = new Main(); // Create an object of class Main (This will call the constructor) System.out.println(myObj.x); // Print the value of x } } Main.main(null); . 5 . No Returns . What actually happens with the constructor is that the runtime uses type data generated by the compiler to determine how much space is needed to store an object instance in memory | Includes all members variables and after the space is designated, the constructor is called as an internal part of the instantiation and initialization process | The constructor exits, the runtime returns the newly-created instance Can&#39;t return a value because it&#39;s not called directly by your code, it&#39;s called by the memory allocation and object initialization code in the runtime | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/11/30/arraylist-vocab.html",
            "relUrl": "/jupyter/2022/11/30/arraylist-vocab.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 2 Homework Practice FRQ 2021 (Question 1)",
            "content": "Part a . a) Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as a substring of secret and then multiplies that number by the square of the length of guess. Occurrences of guess may overlap within secret. Assume that the length of guess is less than or equal to the length of secret and that guess is not an empty string. . public int scoreGuess (String guess) { int count = 0 for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length() * guess.length(); } . Part b . b) Write the WordMatch method findBetterGuess, which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higher score is returned. If the scoreGuess method returns the same value for guess1 and guess2, then the alphabetically greater guess is returned. The following example shows a declaration of a WordMatch object and the outcomes of some possible calls to the scoreGuess and findBetterGuess methods. WordMatch game = new WordMatch(&quot;concatenation&quot;); . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } . Scoring Guidelines . Part A . compare guess to substring of secret | Uses of substring secret with correct length for comparison with guess | Loops through all necessary substrings of secret | Counts number of identified occurences of guess within secret | Calculate and returns correct final score (algorithm) | . Part B . Calls scoreGuess to get scores for guess1 and guess2 | Compares the scores | Determines which guess1 and guess2 is alphabetically greater | Returns the identified guess1 or guess2 (algorithm) | . Takeaways . Part A . We believe we would earn a 5/5, full credit, for this part because we completed all of the elements of the point guidlines. At first, we forgot the return statement, but we were able to problem solve and fix this. It was also hard to get the correct syntax down while we were working with new elements in Java | . Part B . Notes After some problem solving we believe we earned full credit. We found this part to be a little easier since it was simple if statements that we had learned previously. | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/11/08/unit-two-hw.html",
            "relUrl": "/jupyter/2022/11/08/unit-two-hw.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 1 Team Homework",
            "content": "import java.util.Scanner; public class PrimitivesCalculator { public static void main(String[] args) { Scanner input; boolean separateCategory; float currentGrade; float desiredGrade; float percentOfFinal; input = new Scanner(System.in); System.out.print(&quot;Do you want separate categories? &quot;); separateCategory = input.nextBoolean(); System.out.println(separateCategory); if(separateCategory == true) { System.out.print(&quot;Enter current grade? &quot;); currentGrade = input.nextInt(); System.out.println(currentGrade); System.out.print(&quot;Enter desired grade? &quot;); desiredGrade = input.nextInt(); System.out.println(desiredGrade); System.out.print(&quot;Enter percent of grade that is final? &quot;); percentOfFinal = input.nextFloat(); System.out.println(percentOfFinal); input.close(); float gradeNeeded = (desiredGrade - currentGrade * (1-percentOfFinal))/percentOfFinal; System.out.println(gradeNeeded); } } } .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/11/08/unit-one-hw.html",
            "relUrl": "/jupyter/2022/11/08/unit-one-hw.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 3 Team HW",
            "content": "Quizz Completion . Conditionals Exercises #1-20 Even . //exercise 2 import java.util.Scanner; Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(a); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(b); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); System.out.print(c); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;Roots are&quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;Root is &quot; + r1); } else { System.out.println(&quot;No real roots.&quot;); } . Input a: 1.0Input b: 5.0Input c: 2.0Roots are-0.4384471871911697 and -4.561552812808831 . //exercise 4 Scanner in = new Scanner(System.in); System.out.print(&quot;Input: &quot;); double input = in.nextDouble(); System.out.print(input); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } . Input: 30.0Positive number . // exercise 6 Scanner in = new Scanner(System.in); System.out.print(&quot;Double 1: &quot;); double num1 = in.nextDouble(); System.out.print(num1); System.out.print(&quot;Double 2: &quot;); double num2 = in.nextDouble(); System.out.print(num2); num1 = Math.round(num1 * 1000); num1 = num1 / 1000; num2 = Math.round(num2 * 1000); num2 = num2 / 1000; if (num1 == num2) { System.out.println(&quot;Same up to three decimal places&quot;); } else { System.out.println(&quot;Different&quot;); } . Double 1: 25.586Double 2: 25.589Different . // exercise 8 Scanner in = new Scanner(System.in); System.out.print(&quot;Type a letter: &quot;); String input = in.next().toLowerCase(); System.out.println(input); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } . Type a letter: a Input letter is Vowel . // exercise 10 int i; System.out.println (&quot;First 10 natural numbers:&quot;); for (i = 1;i &lt;= 10;i++) { System.out.println(i); } System.out.println (&quot; n&quot;); . First 10 natural numbers: 1 2 3 4 5 6 7 8 9 10 . 2019 FRQ 1 . // part a public static int numberOfLeapYears(int year1, int year2) { int numLeapYears = 0; for (int i = year1; i &lt;= year2; i++) { if (isLeapYear(i)) { numLeapYears ++; } } return numLeapYears; } . // part b public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int theDate = dayOfYear(month, day year); int theDay = (firstDay + theDate - 1) % 7; return theDay; } . public class APCalendar { /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { /* to be implemented in part (a) */ int numLeapYears = 0; for (int i = year1; i &lt;= year2; i++) { if (isLeapYear(i)) { numLeapYears ++; } } return numLeapYears; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int theDate = dayOfYear(month, day year); int theDay = (firstDay + theDate - 1) % 7; return theDay; } // There may be instance variables, constructors, and other methods not shown. } .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/11/08/unit-3-hw.html",
            "relUrl": "/jupyter/2022/11/08/unit-3-hw.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Project Based Learning Notes",
            "content": "Week 1 . I learned how to set up the tools and applications needed for the entirety of this class We will be using GitHub, VSCode, and AWS for deployment | . | How to work VSCode _notebooks are called Jupyter Notebooks and have the .ipynb file ending These notebooks allow you to use both markdown and coding cells | . | _posts folder contains all of the markdown files to help with both frontend designing and the basic blogs we will use throughout the trimester These posts allow only markdown cells | . | _word is used in VSCode to save any documents to your Fastpages in GitHub | _pages folder includes both markdown files and HTML files | _images folder contains all of the downloaded images and screenshots that can then be added to your Jupyter notebooks and markdown files Can freely add or remove images from this folder | . | The index.html file contains the Fastpage&#39;s homepage frontend which you can easily customize | . | . Week 2 . Learned all about primitive types during this week notes on this added to the trimester notes | . | Writing --version in terminal allows you to see which version you installed for most of your installations | You can do a lot of different commands in your terminal in VSCode that would also work in replacement of your system terminal ls displays the list of files and subdirectories in your chosen directory | pwd prints the working directory that you are currently in | ls -al lists all of the contents in the directory including any hidden files you might have | cd takes you to the home directory | rm removes a file completely &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; Week 3 . AWS stands for Amazon Web Services We will be using AWS for deployment of our websites later in the trimester | . | Deployment is essentially the process that allows the website to be displayed in the Internet Can use many different cloud servers, as well as choose specific tools and services EC2 is a cloud computing platform that will serve our website | GitHub is the platform we are using to share our code on the Internet | Docker is a platform for developing, shipping, and running applications | DNS is the Domain Name Service allows us to choose the name for our website | . | . | I learned how to set up the basic tools and services needed for the deployment of our website | . Week 4 . We talked about agile methodology How we can use agile methodology to create a more efficient scrum team when faced with multiple tasks (like all the takss needed to build a website) | . | We established the following roles for our scrum team The scrum master acts as the leader (me) The manager of tasks and checking the efficiency of the team as a whole | Helps scrum team members who are in need of help on their specific tasks | . | DevOps role manages deployment (Madhumita) AWS deployment and managing POM files | . | Frontend developers manages our frontend (Shraddha) Writes code to edit and customize what user iteracts with on our website | . | Backend developers work more on actual database and backend code (Meena) | . | Using team repositories and the GitHub features (scrumboard, issues, etc.) to manage our individual tasks and review tickets as a team | . Week 5 . Started the process of our website for this trimester | Talked about UML or Unified Modeling Language and how UML diagrams are useful for helping us visualize our website building process and constructing new features to our website | Coming up with our idea for our website Have to make sure that it actually has a purpose and can be applied to the real world | Our idea is to have a Del Norte MarketPlace where students from Del Norte can buy and sells items related to school. | . | . Week 6 . This week we got the project approval for our website We showed off our UML diagrams, our Wireframes (prototypes of our website design), and our Brainwrites (brainstorms for our website) | . | We also spent this week working with APIs and ASCii art API or Application Programming Interface is a way for multiple computer programs to communicate with each other simultaneously RapidAPI is used to connect API&#39;s and usually uses the &quot;fetch&quot; to actually use the API off of the Internet can be really useful to quickly and efficiently add more features to our website | . | . | ASCii characters can be used to create art we created a program to convert an image into ASCii art | . | . | . Week 7 . We talked in depth are GitHub and Git Sociology GitHub and Git are social computing tools | We have and will be using both GitHub and Git often in this class | . | GitHub is essentially a cloud-based Git repository and a hosting service GitHub has many tools and features that can be used to manage the software | . | Git is within GitHub and manages files &amp; versions Git allows programmers to share code and work together on projects | . | We also talked about talked about ArrayLists and the differences between Arrays and ArrayLists | . Week 8, 9, 10 . These three weeks were spent learning the main topics that CollegeBoard focuses on for this course Our lessons were student led and included homework and hacks to keep us engaged everyday | . | We learned about writing classes, using objects, primitive types, iteration, boolean expressions, and arrays Notes on these topics were added to the trimester notes | The homework from each of these lessons were accomplished together with my scrum team in order to collaborate and help each other with concepts that we were confused about This work is in separate Jupyter Notebooks labeled by unit number | . | . | . Week 11 . This week was spent code, code, coding We were really focusing on our website and trying to get it up and ready for Night at the Museum Me and Shraddha worked on frontend code together and working to make our website look as close as possible to our wireframes despite being hosted on GitHub Fastpages | Meena and Madhumita worked together on backend code and set up our database for our listings | We all worked together to connect our separate frontend and backend code that was created on different repositories | . | We also had to worry about managing our tasks diligently, maintaining a good mindset despite our frustrations, and getting our website deployed for N@TM | . | At N@TM, we were able to enjoy the fruits of our labor We demoed our website to parents and students who were passing by | We took pictures and made memories with our website along with our classmates&#39; websites | We explored other classes trimester work after our shift ended | . | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/11/08/pbl-notes.html",
            "relUrl": "/jupyter/2022/11/08/pbl-notes.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Collegeboard APCSA Notes",
            "content": ". CollegeBoard Notes . Unit 1 Primitive Types . Primitive types categorized into two types of data types Primitive data types - includes byte, short, int, long, float, double, boolean and char | Non-primitive data types - such as String, Arrays and Classes | . | There are eight primitive types A Byte (1 byte) and stores whole numbers from -128 to 127 | A short (2 bytes) and stores whole numbers from -32,768 to 32,767 | An int (4 bytes) and stores whole numbers from -2,147,483,648 to 2,147,483,647 | A long (8 bytes) and stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 | A float (4 bytes) and stores fractional numbers which is great when storing 6 to 7 decimal digits | A double (8 bytes) and stores fractional numbers which is great when storing 15 decimal digits | A boolean (1 bit) and stores only 2 values, true or false | A char (2 bytes) and stores a single character/letter or ASCII values | . | . Unit 2 Using Objects . Java is object-oriented programming language (OOP) Everything in Java is associated with classes and objects, along with its attributes and methods. In real life, a car is an object and has attributes, like weight and color, and methods, like drive and brake. | A Class is like an object constructor, or a &quot;blueprint&quot; for creating objects. | . | To create classes, use the keyword &quot;class&quot; (usually main class is created) | In Java, an object is created from a class. We have already created the class named Main, so now we can use this to create objects. | You can also create multiple objects for one class | . Unit 3 Boolean Expressions and if Statements . Boolean is a primitive data type that can only store true or false values | Boolean can be declared with the keyword &quot;boolean&quot; | . import java.util.Scanner; public class booleanExample //define class using class keyword { public static void main(String[] args) //java main method { boolean isCorrect = true; //declare the boolean variables using boolean keyword boolean isWrong = false; if (isCorrect) { System.out.println(&quot;You are right.&quot;); } else { System.out.println(&quot;You are wrong.&quot;); } } } booleanExample.main(null); . You are right. . This can also be used to compare values and numbers. For example, using a comparison operator, like the &gt; operator, we can find out if an expression is true. This can be easily used in real life situations like the following. . int myAge = 16; // stating the two integers with their values int votingAge = 18; System.out.println(myAge &gt; votingAge); // returns false, because 16 is less than 18 . false . Unit 4 Iteration . An Iterator is an object that loops through collection | To use an Iterator in Java, you must import it from the java.util package. | To get an Iterator, the iterator() method can be used | There are three types of iterations that can be used For Loops | While Loops | Recursions | . | You can also add or remove numbers using an Iterator | . import java.util.ArrayList; import java.util.Iterator; public class Main { public static void main(String[] args) { ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(); numbers.add(12); numbers.add(8); numbers.add(2); numbers.add(23); Iterator&lt;Integer&gt; it = numbers.iterator(); while(it.hasNext()) { Integer i = it.next(); if(i &lt; 10) { it.remove(); } } System.out.println(numbers); } } . Unit 5 Writing Class . There are a couple of steps to writing a class make sure to use the class keyword to create a class in the start | To create an object of Main, specify the class name, followed by the object name, and use the keyword new Constructors are used to create new objects | . | . | Instance variables are used to store any information regarding objects created in a class | Methods are used to show programs a new command they must run specific methods are used to perform specific tasks in a class | . | . Unit 6 Array . Used to store multiple values in a single variable | To declare an array, define the variable type with square brackets and insert values formatted in a comma-separated list, using curly braces | . String[] cars = {&quot;Volvo&quot;, &quot;BMW&quot;, &quot;Ford&quot;, &quot;Mazda&quot;}; . Access array elements by referring to the index number in the array. The counting for the elements starts at 0. | . System.out.println(cars[0]); . You can also change the value of a specific element using the index number | To find out how many elements an array has, use the length property | . String[] cars = {&quot;Volvo&quot;, &quot;BMW&quot;, &quot;Ford&quot;, &quot;Mazda&quot;}; System.out.println(cars.length); . Unit 7 Arraylist . The ArrayList class is a resizable array, which can be found in the java.util package | The size of an Array cannot be modified so if you want to add or remove elements to/from an array, you have to create a new one whereas for Arraylists, elements can be added and removed whenever you want The syntax for each type is also different | . | The ArrayList class has many useful methods. For example, to add elements to the ArrayList, use the add() method | . import java.util.ArrayList; public class Main { public static void main(String[] args) { ArrayList&lt;String&gt; cars = new ArrayList&lt;String&gt;(); cars.add(&quot;Volvo&quot;); cars.add(&quot;BMW&quot;); cars.add(&quot;Ford&quot;); cars.add(&quot;Mazda&quot;); System.out.println(cars); } } . To access an element in the ArrayList, use the get() method and refer to the index number | . cars.get(0); . Unit 8 2D Array . A 2D Array is the simplest form of a multidimensional array | The syntax for declaration is | . data_type[][] array_name = new data_type[x][y]; int[][] arr = new int[10][20]; . The syntax for initialization is | . array_name[row_index][column_index] = value; arr[0][0] = 1; . Elements in two-dimensional arrays are commonly referred by x[i][j] where ‘i’ is the row number and ‘j’ is the column number | To output all the elements of a 2D array, use nested for loops For this 2 for loops are needed, one to traverse the rows and another to traverse the columns | . | . Unit 9 Inheritance . Inheritance is essentially what attributes/methods the child class inherits from the parent class This can be used with the fibonacci sequence mini-lab earlier in the trimester | Is useful when you want to inherit the same attributed and methods from another class &quot;this&quot; is used when referring to the current object in the method | &quot;super&quot; is used to call any superclass method like the parent class | . | . | . Unit 10 Recursion . Recursion is used to make a function call itself and breaks complicated problems down into simple problems | Use recursion to add all of the numbers up to 10 | . public class Main { public static void main(String[] args) { int result = sum(10); System.out.println(result); } public static int sum(int k) { if (k &gt; 0) { return k + sum(k - 1); } else { return 0; } } } . When the sum() function is called, it adds parameter k to the sum of all numbers smaller than k and returns the result. When k becomes 0, the function just returns 0. Since the function does not call itself when k is 0, the program stops there and returns the result. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/11/08/blog-notes.html",
            "relUrl": "/jupyter/2022/11/08/blog-notes.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Practice MCQ Test",
            "content": "I received a score of 35/40 on this practice multiple choice question test. This practice test was a really exciting experience and I learned a lot of how much I have learned this trimester and what I need to improve on based off of my mistakes. . Question 4 . Consider the following code segment. . int x = 7; int y = 3; if ((x &lt; 10) &amp;&amp; (y &lt; 0)) System.out.println(&quot;Value is: &quot; + x * y); else System.out.println(&quot;Value is: &quot; + x / y); . What is printed as a result of executing the code segment? . Answer . The answer option that I chose was a value of 2.3333333. However, the correct answer is the value 2. My answer option would only be correct if either x or y were a data type: double instead of data type: int or if either value was typecast as a double in the expression. Since the floating division is not used and integer division is used in the question, 7/3 is rounded down from 2.3333333 to 2. . Question 5 . Consider the following method. . public Arraylist&lt;Integer&gt; mystery(int n) { Arraylist&lt;Integer&gt; seq = new Arraylist&lt;Integer&gt;(); for (int k = 1; k &lt;= n; k++) seq.add(new Integer(k * k + 3)); return seq; } . Which of the following is printed as a result of executing the following statement? System.out.println(mystery ( 6 ) ) ; . Answer . The answer option that I chose was [3, 4, 7, 12, 19, 28, 39]. However, the correct answer is [4, 7, 12, 19, 28, 39]. I was wrong since this would only be the answer if k was initialized to 0. Since this event didn&#39;t occur in the code above, the first iteration would occur when k is 1, and so the starting value would be 4. . Question 19 . Assume that a and b have been defined and initialized as int values. The expression . ! ( ! (a != b ) &amp;&amp; (b &gt; 7) ) . is equivalent to which of the following? . Answer . The answer option I chose was (a != b ) || (b &lt; 7). However, the correct answer is (a != b ) || (b &lt;= 7). This was a silly mistake since the reasoning why I was wrong was because the opposite of &gt; is &lt;=. Therefore, the opposite of (b &gt; 7) is (b &lt;= 7). . Question 24 . Consider the following code segment. . int [] oldArray = {1, 2, 3, 4, 5, 6, 7, 8, 9}; int [][] newArray = new int[3][3]; int row = 0; int col = 0; for (int value : oldArray) { newArray[row][col] = value; row++; if ((row % 3) == 0) { col++; row = 0; } } System.out.println(newArray[0][2]); . What is printed as a result of executing the code segment? . Answers . The answer option I chose is 5. However, the correct answer option is 7. My answer option is wrong since the value 5 is at newArray[1][1]. My answer option was incorrect since the for loop terminates, and then the newArray contains values { {1, 4, 7}, {2, 5, 8}, {3, 6, 9} }. Therefore, the actual value of newArray[0][2] would be 7. . Question 35 . Consider the following code segment. . int num = 2574; int result = 0; while (num &gt; 0) { result = result * 10 + num % 10; num /= 10; } System.out.println(result); . What is printed as a result of executing the code segment? . Answer . The answer option that I chose was 2574 whereas the actual correct answer option is 4752. In this question, my answer option was num&#39;s original value. But, num is continuously divided by 10 until it is 0. This means that in the fourth iteration, the result is assigned 475 * 10 + 2 % 10 = 4750 + 2 = 4752 and num is assigned 0. Therefore, the loop will terminate and then 4752 will be the correct value of num. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/11/07/mcq-corrections.html",
            "relUrl": "/jupyter/2022/11/07/mcq-corrections.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 5 Team Homework",
            "content": "2019 Free Response Question 2 . This question involves the implementation of a fitness tracking system that is represented by the StepTracker class. A StepTracker object is created with a parameter that defines the minimum number of steps that must be taken for a day to be considered active. . The StepTracker class provides a constructor and the following methods. . addDailySteps, which accumulates information about steps, in readings taken once per day | activeDays, which returns the number of active days | averageSteps, which returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked | . Write the complete StepTracker class, including the constructor and any required instance variables and methods. Your implementation must meet all specifications and conform to the example. . public class StepTracker { // accessing and showing our private instance variables private int totalSteps; private int minimumSteps; private int daysActive; private int days; // constructor with the parameter public StepTracker(int least){ minimumSteps = least; totalSteps = 0; // values to initialize variables daysActive = 0; days = 0; } //added the dailySteps method as the &quot;AddDailySteps&quot; public void AddDailySteps(int steps){ totalSteps += steps; //shows active days and the incremental counting days++; if (steps &gt;= minSteps){ daysActive++; // updates the other instance variables } } //the activeDays method public int getdaysActive(){ // declared and implemented into program return days; } public double avgSteps(){ if (days == 0){ return 0.0; } else{ //returns the calculated double of the average number of steps walked return (double) totalSteps / days; } } } .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/25/unit-5-hw.html",
            "relUrl": "/jupyter/2022/10/25/unit-5-hw.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 4 Team Homework",
            "content": "Caesar Cipher Program . Try to write a caesar cipher program that shifts each letter in a message 3 letters forward. Use any of the methods you learned today. Use it to decode the 3 messages we&#39;ve given you! . public class CaesarCipher { public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; int shiftBy = 3 ; // showing how much to shift by CaesarCipher caesarCipher = new CaesarCipher(); // instantiating CaesarCipher class System.out.println(&quot;Decrypted Message1 : &quot; + caesarCipher.decryptMessage(message1, shiftBy)); System.out.println(&quot;Decrypted Message2 : &quot; + caesarCipher.decryptMessage(message2, shiftBy)); System.out.println(&quot;Decrypted Message3 : &quot; + caesarCipher.decryptMessage(message3, shiftBy)); } // method for decrypting given message by the shift int value String decryptMessage(String input, int shiftBy){ int asciia =(int) &#39;a&#39;; // assigning ascii values for a String decryptMessage = &quot;&quot;; for(int i=0 ; i &lt; input.length(); i++){ char c = input.charAt(i) ; char newChar = c ; // does decryption only for letters (not the exclamation mark, not spaces, etc.) if( Character.isLetter(c) ){ int intValue = (int) c ; // finds the ascii value for given letter int newValue = (intValue - asciia + shiftBy ) % 26 ; // assiging deciphered ascii value by subtracting the ascii value and adding the shift value newValue = newValue + asciia ; newChar = (char) newValue; // converting ascii value to new character } decryptMessage += newChar ; } return decryptMessage; } } CaesarCipher.main(null); . Decrypted Message1 : Nice job! Decrypted Message2 : code code code Decrypted Message3 : supercalifragilisticexpialidocious .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/25/unit-4-work.html",
            "relUrl": "/jupyter/2022/10/25/unit-4-work.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Array Lesson - Team 5",
            "content": "Arrays Overview . Arrays are 10-15% of the AP CSA Exam | The four main topics that College Board wants you to know Array creation and access | Traversing arrays | Enhanced for loops for arrays | Developing algorithms using arrays | . | The overall purpose of arrays is to store multiple values in a single variable, instead of declaring separate variables for each value. | . 6.1 Array Creation and Access . Arrays are used to store one data type | Unlike Arraylists, arrays have a fixed size and cannot be changed | Arrays can be denoted using braces {} Below is an example of a simple array storing our scrum team names [Meena, Shraddha, Madhumita, Pranavi] . | To use an array you have to use the command import java.util.Arrays; . | . Making Arrays . There are two ways to make arrays . using constructors | using pre-intiliazed arrays | . dataType[] arrayName = new dataType[numberOfItems]; //Constructor int[] arraySample = {1,3,5,7,9}; //pre-initialized arrays . Accessing Elements in Arrays . You can access the elements in an array using different commands | . arrayName.Length //determine the size arrayName.length - 1 //to access the last item in the array . Hack 1 . How do we access the even numbers in arrayOne from above? . int[] arrayOne = {1, 3, 5, 7, 9}; . Hack 2 . Which of the following is FALSE about arrays . A. A java array is an object | B. Length of array can be changed after creation of array | C. Numerical data types of arrays are initialized to 0 to start | . 6.2 Traversing Arrays . Traversing is accessing every value in the array | Can be done using a loop like a for loop or while loop | Below is an example - using a for loop, we can iterate through each fruit in the array of Strings and print it out | . // Here is the array we will be working with String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; for (int i = 0; i &lt; myFruits.length; i++) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . Can also loop through an array in reverse | . for (int i = myFruits.length - 1; i &gt;= 0 ; i--) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . If we have a list of numbers, we could change each value in the array by a certain amount | . // Here is the array we will be working with int[] myNumbers = new int[] {1, 3, 5, 7, 9}; for (int i = 0; i &lt; myNumbers.length; i++) { // add 10 to each element in the array myNumbers[i] += 10; System.out.println(&quot;New element &quot; + i + &quot; is &quot; + myNumbers[i]); } . We can also traverse an array using a while loop | . // Here is the array we will be working with String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; int i = 0; while (i &lt; myFruits.length) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); i++; } . Bound Errors . ArrayIndexOutOfBoundsException thrown, can happen when using loops to access array elements | In the example below instead of the condition being while the index is less than the length of the array, the condition is less than or equal too | This mean the loop will try to run when i = 4 (since the length of the list is 4). However since array index starts from 0, the last item in the array will have an index of 3. So, index of 4 will be out of bounds, resulting in the error. | . int i = 0; while (i &lt;= myFruits.length) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); i++; } . Hack 3 . Create a function that takes in a list of integers and returns the list with the integers in ascending order. Print every element in this list | Example int[] myNumbers = new int[] {5, 3, 4, 1, 2}; | arraySorter(myNumbers); | Expected Output 1 | 2 | 3 | 4 | 5 | . | . | . Hack 4 . Given the following code segment, which of the following will cause an infinite loop? Assume that temp is an int variable initialized to be greater than zero and that a is an array of integers. | . for ( int k = 0; k &lt; a.length; k++ ) { while ( a[ k ] &lt; temp ) { a[ k ] *= 2; } } . A. The values don&#39;t matter this will always cause an infinite loop. | B. Whenever a includes a value that is less than or equal to zero. | C. Whenever a has values larger then temp. | D. When all values in a are larger than temp. | E. Whenever a includes a value equal to temp. | . 6.3 Enhanced for loop for Arrays . This topic was pretty short, but essentially what you need to know is about the enhanced for loop. The enhanced for loop can be used to traverse through most data structures (i.g. arrays). However, it can only traverse in a forward direction. Usually the structure is like so . for (dataType i: arrayName) { do something with i } . Essentially, this code mentions how every element in the array (i) has to have something done to it. It&#39;s important to note that although there is access to the element i, but it isn&#39;t possible to change the value/set new values to element i. . We can use mutator methods on objects on the array to set the value of their instance variables. This is because i is a copy of the object reference, which means that i refers to the same object as the array element, so calling methods on i is the same as calling methods on the individual array elements themselves. For example . public class Student { private String name; /** Sets the name of the Student */ public void setName(String name) { this.name = name; } /** Other instance variables, methods, and constructors not shown */ } // IN ANOTHER CLASS /** Resets all students&#39; names */ public static void doubleArray(Student[] array, String defaultName) { for (Student student: array) { student.setName(defaultName); // Sets each student&#39;s name to a default name } } . Hack 5 . In this example, each loop includes an int array and a String array. Try adding another high score and another name to the arrays and se if you can get it to run. . public class ForEachDemo { public static void main(String[] args) { int[] highScores = { 10, 9, 8, 8}; String[] names = {&quot;Jamal&quot;, &quot;Emily&quot;, &quot;Destiny&quot;, &quot;Mateo&quot;}; // for each loop with an int array for (int value : highScores) { System.out.println( value ); } // for each loop with a String array for (String value : names) { System.out.println(value); // this time it&#39;s a name! } } } . Hack 6 . What code would you add to the following to output the length of each String that&#39;s returned from the below method? Choose A, B, C, or D. . . 6.4 Developing Algorithms using Arrays . Here are some algorithms that arrays can be used for (from college board standards), . Minimum and Maximum of a list of elements | Compute the sum, average, or mode of multiple elements | Determine if at least one element has a property | Access consecutive pairs of elements | Determine duplicates | . What to use when problem solving with arrays .length can be used to find the length of an array . The value at a specific index can be found with array[i], where i is the index | An element at index i can be replaced using array[i] = new element | You can iterate over an array with a for loop for(type element: array) { code here . | . Computing Sums with Arrays . See the code below for a sample algorithm of how to compute the sum of elements in an array. This could be applied to finding the mean, standard deviation, or any other algorithm that requires summation. . int[] array = {5, 1, 78}; // intialize int sum = 0; // variable to keep track of sum for (int number; array) { // iterates over each loop in the array sum += number; // the number is added to the sum } System.out.println(sum); //expected sum is 84, so 84 should be printed . Find the max . // from college board private double findMax(double[] values) { double max = values[0]; // initialize max with first element of array for(int i=1; i&lt;values.length; i++) { // starting with the second element, iterate over the rest of the array if (values[i] &gt; max) { // if the current element is greater than the max max = values[i]; // set the max equal to the greatest value until that point } } return max; } . Find the amount of even numbers. . private int findEvenNumbers(int[] values) { int evenCount = 0; // initalize count of even numbers to zero for(int value: values) { // iterate over every element of array if(value % 2 == 0) { // use modulus operator to check if value is even evenCount += 1; // increment evenCount if the value is even } } return evenCount; } . Hack 7 . Return a left-shifted array . Ex . {7,9,4} --&gt; {9,4,7} | {1,2,3} --&gt; {2,3,1} | {0,9} --&gt; {9,0} | {1} --&gt; {1} | . Hack 8 . Find the number of duplicate elements in an array. . Hack 9 . Use arrays to reverse a string. . Ex . &quot;hello &quot; --&gt; &quot;olleh &quot; | &quot;slay &quot; --&gt; &quot;yals &quot; | &quot;mom &quot; --&gt; &quot;mom &quot; | . Homework . Finish the FRQ part a for homework. This free response question deals with arrays. . . .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/25/arrays-lesson.html",
            "relUrl": "/jupyter/2022/10/25/arrays-lesson.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "UNIT 3, 4, 5 NOTES",
            "content": "Boolean Expressions . represent logic and tell whether something is true or false | operators used for boolean | logical operators &amp;&amp; means and | || means or | ! means not | . | De Morgan&#39;s Law help simplify boolean expressions two laws to it | truth tables are a good war to visualize boolean expressions | . | to compare objects, use the == for aliases for the same objects or to see if it is null or .equals() to see if the attribute is the same for two objects | . Iteration . simplifies code by allowing it to repeat itself | while loops have two portions: the boolean expression and the brackets that have some code in them the boolean expression is checked before the loop starts every time the loop ends and is about to start anew | . | changes conditions again and again until returns false and ends the while loop | iterates over numerous elements | . | for loops has three portions: initialization, test condition, and change for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . | when the loop condition is false, execution will continue at the next statement after the body of the loop. | strings can also be manipulated through the use of iteration String name = &quot;CodeCodeCode&quot;; | . for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . - nested iteration is where there is a loop within a loop - similar to nested conditionals . for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . - there are also nested while loops - aren&#39;t very practical though - for each loops are similar to for loops - three portions to it - array, item, dataType . public class ForEachLoops { . public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } . } } . known as the enhanced for loops | . Writing Classes . class is a blueprint to create objects | object is the instances of a class | public access means anyone can access the class | private means that there is restricted access to the class | constructors purpose is to initialize instance variables when object&#39;s called set an initial object state and initial instance variables | default constructors has no parameters | . | three steps to creating and calling a method declare object of the class in the main method | call the method (whatever method you want) | write the method&#39;s header and body code | . | parameters used when creating a method when method is called, pass parameters that are then saved as parameter variables | . | | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/18/objects.html",
            "relUrl": "/jupyter/2022/10/18/objects.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "ArrayLists Lesson",
            "content": "Arrays vs ArrayLists . The main difference between an array and an arraylist is that arraylists can grow and shrink whereas arrays can&#39;t. Arrays have a fixed length so once it is full, more elements cannot be added. If elements are removed from an Arrays, the maximum about of space will not shrink. However, ArrayLists can adjust dynamically in regards to elements. Essentially in Java, ArrayLists can: . ArrayList can grow and shrink based on the whether you add / remove elements | ArrayList can contain duplicate elements | ArrayList maintains the insertion order (elements appear in the same order in which they are inserted) | . Methods of ArrayLists . addAll(int index, Collection collection) Adds all elements in the above collection to the list; and when a parameter is passed, it adds all the elements of the collection to the end | . | add(int index, element) Adds an element at a specific spot in the list; but when a parameter is passed, it will just add the element at the end | . | clear() Removes all the elements in the list | Reference of the list created is still stored. | . | containsAll(Collection collection) Checks if the list contains all the elements in the mentioned collection | . | contains(element) Checks if the list contains the mentioned element Returns true if the element is in the list | . | . | equals(element) Compares the equality of the mentioned element with other present elements | . | get(int index) Returns elements at the specified index | . | hashCode() Returns the hashcode (an integer value that is associated with each object in Java language) value of the list | . | indexOf(element) Returns the first-placed of the mentioned element Returns -1 if the element isn&#39;t prevalent in the list | . | . | isEmpty() Checks if the list is empty or not Returns true if the list is empty | Returns false if the list isn&#39;t empty | . | . | lastIndexOf(element) Returns the last-placed of the mentioned element Returns -1 if the element isn&#39;t prevalent in the list | . | . | remove(element) Removes first-placed of the mentioned element in the list | . | remove(int index) Removes an element from the specified index and shifts subsequent elements to the left along with decreasing indexes by 1 | . | set(int index, element) Replaces elements at a given index with the new element | Returns the newly replaced element as a new element | . | size() Returns the list&#39;s size | . | sort(Comparator comp) Sorts the elements in the list based on the mentioned comparator | . | . ArrayList Example: Possible Data Structure for Students Signed Up for Website . import java.util.*; public class JavaExample { public static void main(String args[]) { /* Creating ArrayList of type &quot;String&quot;*/ ArrayList&lt;String&gt; obj = new ArrayList&lt;String&gt;(); /*dds elements to the ArrayList*/ obj.add(&quot;Rebecca&quot;); obj.add(&quot;Saathvika&quot;); obj.add(&quot;Sarayu&quot;); obj.add(&quot;Prisha&quot;); obj.add(&quot;William&quot;); obj.add(&quot;Vidhi&quot;); obj.add(&quot;Shreya&quot;); obj.add(&quot;Tianbin&quot;); // Displaying elements System.out.println(&quot;Starting Students Signed Up:&quot;); for(String str:obj) System.out.println(str); System.out.println(&quot;the students are added to the arrayList&quot;); /* Adds element at the stated index in the list * obj.add(0, &quot;Rohan&quot;) - Adding element &quot;Rohan&quot; to the first position in the list * obj.add(1, &quot;Surya&quot;) - Adding element &quot;Surya&quot; to the second position in the list */ obj.add(0, &quot;Rohan&quot;); obj.add(1, &quot;Surya&quot;); // Displaying elements of the new list System.out.println(&quot;Updated Students List (Additions):&quot;); for(String str:obj) System.out.println(str); //Remove elements from the ArrayList obj.remove(&quot;Sarayu&quot;); //Removes &quot;Sarayu&quot; from the list obj.remove(&quot;Saathvika&quot;); //Removes &quot;Saathvika&quot; from the list // This displays elements for the newer list System.out.println(&quot;Updated Students List (Removals):&quot;); for(String str:obj) System.out.println(str); //Removes the element from the index of the list obj.remove(1); //Removes the second element from the list // Displaying elements of the final most/most newly updated list System.out.println(&quot;Final Students List:&quot;); for(String str:obj) System.out.println(str); } } JavaExample.main(null); . Starting Students Signed Up: Rebecca Saathvika Sarayu Prisha William Vidhi Shreya Tianbin the students are added to the arrayList Updated Students List (Additions): Rohan Surya Rebecca Saathvika Sarayu Prisha William Vidhi Shreya Tianbin Updated Students List (Removals): Rohan Surya Rebecca Prisha William Vidhi Shreya Tianbin Final Students List: Rohan Rebecca Prisha William Vidhi Shreya Tianbin .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/06/arraylists.html",
            "relUrl": "/jupyter/2022/10/06/arraylists.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Chuck Norris API",
            "content": "import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.net.http.HttpClient; import java.net.URI; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://chuck-norris-jokes.p.rapidapi.com/de/jokes/random&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;644e68648emsh4cd27460fc55318p1db393jsn3ea02f46215c&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;chuck-norris-jokes.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;joke&#34;:&#34;Beim Spazierengehen wurde neulich der Blitz von Chuck Norris getroffen&#34;} .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/10/04/chucknorris.html",
            "relUrl": "/2022/10/04/chucknorris.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Trimester 1 Project Passion",
            "content": "Clothes (Pranavi) . Is essentially modeled after a typical shopping website (Amazon, Walmart, etc.). Each image has it&#39;s name and the price. If the user clicks on the image though, the website redirects the user to a new page with a better description of the product along with the price and other details. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/03/project-passion.html",
            "relUrl": "/jupyter/2022/10/03/project-passion.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Arrays and Images",
            "content": "Saving PNG to GIF . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Image to ASCII Conversion . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int wScale, int hScale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (wScale/100.0) + 0.5); int height = (int) (this.height * (hScale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public void changeColor( String colorScale, String outFileName) { BufferedImage image = null; try { File input = new File(this.inFile); image = ImageIO.read(input); width = image.getWidth(); height = image.getHeight(); for(int i=0; i&lt;height; i++) { for(int j=0; j&lt;width; j++) { Color c = new Color(image.getRGB(j, i)); int red = (int)(c.getRed() * 0.299); int green = (int)(c.getGreen() * 0.587); int blue = (int)(c.getBlue() *0.114); Color newColor = new Color(red+green+blue, red+green+blue, red+green+blue); if(colorScale.equals(&quot;gray&quot;)){ newColor = new Color(red+green+blue, red+green+blue, red+green+blue); }else if (colorScale.equals(&quot;red&quot;)){ newColor = new Color(red+green+blue, 0, 0); }else if (colorScale.equals(&quot;blue&quot;)){ newColor = new Color(0, 0, red+green+blue); }else if (colorScale.equals(&quot;green&quot;)){ newColor = new Color(0, red+green+blue, 0); } image.setRGB(j,i,newColor.getRGB()); } } File output = new File(this.outDir + colorScale + outFileName); ImageIO.write(image, &quot;png&quot;, output); } catch (Exception e) { return; } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(22,10); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(20,10); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics monaLisaGray = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisaGray.printStats(&quot;Original&quot;); monaLisaGray.changeColor(&quot;gray&quot;,&quot;MonaLisa.png&quot;); Pics monaLisaRed = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisaRed.printStats(&quot;Original&quot;); monaLisaRed.changeColor(&quot;red&quot;,&quot;MonaLisa.png&quot;); Pics monaLisaBlue = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisaBlue.printStats(&quot;Original&quot;); monaLisaBlue.changeColor(&quot;blue&quot;,&quot;MonaLisa.png&quot;); Pics monaLisaGreen = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisaGreen.printStats(&quot;Original&quot;); monaLisaGreen.changeColor(&quot;green&quot;,&quot;MonaLisa.png&quot;); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 11496 86x41 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 3044 60x27 images/tmp/pumpkin.png Original: 499298 389x413 images/MonaLisa.png Original: 499298 389x413 images/MonaLisa.png Original: 499298 389x413 images/MonaLisa.png Original: 499298 389x413 images/MonaLisa.png .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/unit/6",
            "relUrl": "/unit/6",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "1st Trimester Project - DNHS Market",
            "content": "Program Design . Brainwrite . The goal of this website is to provide a platform that is convenient and reliable for students in their purchases related to school. Whether it be school merch, or even help with academics, our website aims to provide aid to all of the Del Norte school body. | The plan is to have them log in with their student account at the start to sign in as their student profile and get the help they need through our website. | The website will not be directly associated with our school due to the legality issues surrounding that entire situation. | . Project Wireframe . We used a Figma to brainstorm visual representations and ideas of what we wanted our website to look like. | We will continue to edit this Figma as the trimester goes on and we edit our plans on the visuals | . Project Workflow . We came up with a workflow diagram to help plan out the different pages of our website and how to attack them. | As we come up with more and more ideas for our website, we will be editing this diagram to maintain a level of organization and planning for our project. | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/09/26/program-design.html",
            "relUrl": "/markdown/2022/09/26/program-design.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Fibonacci Hacks",
            "content": "Abstract Fibonacci . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } } . Fibonacci - For and While Loop (Extends) . In this display, we see how firstTerm = 0 and secondTerm = 1 initially as the first two digits in the output of the Fibonacci series. We use the for loop to print the firstTerm and secondTerm, add these two terms to compute nextTerm, and assign whatever value we got to nextTerm. We can also create a fibonacci sequence with a while loop. The program is essentially the same as the previous program. Although both programs work well, using a for loop would be better since the number of iterations from 1 to n is known. . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } //Fibo.main(null); public class FiboWhile extends Fibo { //extending the Fibo class public void print() { //printing out all of the things needed for this new class System.out.println(&quot;Using Fibowhile &quot; ); // title System.out.println(&quot;Init method = &quot; + this.name); // init method name System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); // prints out the 20th term, list, and hashmap System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); int i = 0; // setting up int i as 0 initially while(i&lt;this.size){ // while loop that uses .getNthSeq from parent class System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); i++; } } static public void main(String[] args) { // setting the print for the FiboWhile and not Fibo Fibo fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); // running the FiboWhile class . Using Fibowhile Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibonacci with Recursion (Extends) . To prevent repeating lines of code, we can use recursion to make our code and life simpler. . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboRec recursion = new FiboRec(); recursion.print(); } } public class FiboRec extends Fibo { // extending FiboRec new class from parent class Fibo public int fibCalc (int i) { // using the recursion to produce Fibonacci sequence, the function fibCalc calls upon itself if (i &lt;= 1) { return i; } else { return fibCalc(i-1) + fibCalc(i-2); } } public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.fibCalc(i)); } } static public void main(String[] args) { // printing out this new class FiboRec Fibo recursion = new FiboRec(); recursion.print(); } } FiboRec.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = 0 fibonacci Sequence 2 = 1 fibonacci Sequence 3 = 1 fibonacci Sequence 4 = 2 fibonacci Sequence 5 = 3 fibonacci Sequence 6 = 5 fibonacci Sequence 7 = 8 fibonacci Sequence 8 = 13 fibonacci Sequence 9 = 21 fibonacci Sequence 10 = 34 fibonacci Sequence 11 = 55 fibonacci Sequence 12 = 89 fibonacci Sequence 13 = 144 fibonacci Sequence 14 = 233 fibonacci Sequence 15 = 377 fibonacci Sequence 16 = 610 fibonacci Sequence 17 = 987 fibonacci Sequence 18 = 1597 fibonacci Sequence 19 = 2584 fibonacci Sequence 20 = 4181 .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/09/26/fibo-hacks.html",
            "relUrl": "/jupyter/2022/09/26/fibo-hacks.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "JavaScript Hacks",
            "content": "console.log(&quot;Welcome to Pranavi&#39;s Javascript&quot;); function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } // define a function to hold data for a Person function Person(name, grade, role) { this.name = name; this.grade = grade; this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, grade: this.grade, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;NA&quot;, &quot;Teacher&quot;); // object type is easy to work with in JavaScript // define a student Array of Person(s) var students = [ new Person(&quot;Pranavi&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Madhumita&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;John&quot;, &quot;Sophomor&quot;, &quot;Student&quot;), new Person(&quot;Shraddha&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Meena&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Bob&quot;, &quot;Junior&quot;, &quot;Student&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students scrumTeam = new Classroom(teacher, students); // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of scrumTeam.classroom for (var row in scrumTeam.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(scrumTeam._toHtml()); . Welcome to Pranavi&#39;s Javascript . NameGradeRole . Mr M | NA | Teacher | Pranavi | Senior | Student | Madhumita | Senior | Student | John | Sophomor | Student | Shraddha | Senior | Student | Meena | Senior | Student | Bob | Junior | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/09/19/TT-js_tutorial.html",
            "relUrl": "/jupyter/2022/09/19/TT-js_tutorial.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Iteration Mini-Lab",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; Monkey 0&quot;, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; Monkey 1&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; Monkey 2&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; Monkey 3&quot;, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; Monkey 4&quot;, &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, { &quot; Monkey 5&quot;, &quot; (ಠ益ಠლ) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; int rowCount = 0; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int col = 0; col &lt; monkeys[rowCount].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } rowCount += 1; //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 6 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 Monkey 4 Monkey 5 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) (ಠ益ಠლ) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ _/ _ 5 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 Monkey 4 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... Monkey 0 Monkey 1 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... Monkey 0 ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/09/13/iteration.html",
            "relUrl": "/2022/09/13/iteration.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Focus and Habits",
            "content": "Focus and Habits . Blog Purpose . The purpose this blog is to illustrate my passion for all things biology while also showing off all of the programming skills I have learned and will learn throughout the course of this year. Although I know what the purpose of my blog is, I still wish to maintain some goals in order to keep on task and stay organized while building this blog. Some of the goals I have for this blog are: . maintain a minimalist, but aesthetic style for the entire blog formatting | make sure to have a realistic and maintainable organization to the blog | include projects and/or news that I find interesting that are going on in the biology field | have a separate place to keep all of my CSA projects and assignments | . Psychology and the Good Life . In this video, Laura Santos talks about the affects that Covid-19 had on us as a society and how she could see the direct impacts of this based on her observations of the students she saw on campus. . Takeaways from the Video . Get Social The Covid-19 hit many people hard because it stole one of the primary sources of happiness that we humans get our behavior from; a social and communicative environment. By engaging with more and more people, we are able to find more and more happiness as well. Afterall, the best coders are the happiest coders. | . | Give Thanks In order to maintain a stable and more positive well-being, we must constantly remind ourselves about all of the things we are grateful for. Although it might seem cheesy or corny at first, stopping to consider the good things in our life brightens our mindset and relays a more positive outlook on our life in general. This also allows us to step away from frustrations (helping our problem-solving skills as well). | . | Be In The Moment Focusing on the present is always able to make us feel better since it allows us to stop worrying about being so “busy” (something that is highly encourage in America and especially in our school). Even the simple practice of sitting with our more negative emotions puts into perspective that these feelings are temporary and don’t need to have so much control over our actions and behavior. | . | Rest And Move Sleep has always been beneficial to our bodily functions, but even more so for our mental stability. In order to maintain a sense of happiness, it is important to have a healthy and consistent sleep schedule. Even eight hours of rest sets a foundation that all happy habits rely on. | . | Be Kind Studies show that we get more happiness from doing nice things for other people than to ourselves. People who are more happy with their lives usually are the ones focusing more on bettering the lives of people less fortunate than themselves. The boost in mood that we get from random acts of kindness allows us to feel better without worrying about harming anyone else. | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/09/10/focus-and-habits.html",
            "relUrl": "/markdown/2022/09/10/focus-and-habits.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Docker Server",
            "content": "",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/09/10/docker-server.html",
            "relUrl": "/markdown/2022/09/10/docker-server.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Conditional Statements",
            "content": "If Statement . // will always print out true as the output since 20 will always be greater than 18 if (20 &gt; 18) { // condition in the parenthesis // the code that is executed if the condition is proved true (the return) System.out.println(&quot;True, 20 is greater than 18&quot;); } // if statements can also be used to test and/or compare variables int a = 20; int b = 18; if (a &gt; b) { System.out.println(&quot;True, variable a is greater than variable b&quot;); } . True, 20 is greater than 18 True, variable a is greater than variable b . Else Statement . // will always print out &quot;Good Bye&quot; since the time is 20 and 20 is always greater than 18, which means the condition is alwaysfalse int time = 20; if (time &lt; 18) { // the condition is in the parenthesis System.out.println(&quot;Good day.&quot;); // the return if the code executed is true under the condition } else { System.out.println(&quot;Good bye.&quot;); // the return if the code executed is false under the condition mentioned } . Good bye. . Else If Statement . // will always print out you won since 17 is greater than 10 and 15 int score = 17; if (score &lt; 10) { // in the parenthesis is the first condition System.out.println(&quot;You lost the game.&quot;); // what return follows if the executed code is true } else if (score &lt; 15) { // in the parenthesis is the second condition System.out.println(&quot;You might win the game.&quot;); // what return follows if the executed code is false for the first condition but true for the second condition } else { System.out.println(&quot;You won the game.&quot;); // what return follows if the executed code is false for both the first and second condition } . You won the game. . If-ElseIf Statements . The if statement is the first condition in the Java program that starts the management of the return. If this first condition in the if statement is true, the program will print out the statement coded inside it. If the condition is false, the execution moves on to the else condition and prints out the statement written inside this condition if it is true. If not, then the program repeats the process of moving on and checking the next condition until the code is executed. . int x; x=105; if (x &lt;= 10) { // condition 1 in the parenthesis System.out.println(&quot;X is less than or equal to 10, it is a pretty small number!&quot;); // if the value of x is less than or equal to 10, the system will return this statement } else if (x &lt;= 20) { // condition 2 in the parenthesis System.out.println(&quot;X is less than or equal to 20!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 20, the system will print out this statement } else if (x &lt;= 30) { // condition 3 in the parenthesis System.out.println(&quot;X is less than or equal to 30!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 30, the system will print out this statement } else if (x &lt;= 40) { // condition 4 in the parenthesis System.out.println(&quot;X is less than or equal to 40!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 40, the system will print out this statement } else if (x &lt;= 50) { // condition 5 in the parenthesis System.out.println(&quot;X is less than or equal to 50!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 50, the system will print out this statement } else if (x &lt;= 60) { // condition 6 in the parenthesis System.out.println(&quot;X is less than or equal to 60!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 60, the system will print out this statement } else { // if the value for x fails to meet all of the above conditions, it returns the statement below System.out.println(&quot;X is greater than 60, it&#39;s a pretty big number!&quot;); } . X is greater than 60, it&#39;s a pretty big number! . Switch-Case Statements . In switch-case statements, it is possible to write as many cases as you want, as long as they are all relevant to the problem. Break statements and default statements are both optional; but if you include the default statement in some place besides the end of the program, you must make sure that the break statement follows right after the default statement. Variables aren&#39;t allowed in these cases so the value for a case must be literal or constant. . int day = 5; String dayString; // This is the switch statement that includes what the data type is, in this case it is int. The value written above must be of the same data type to prevent any errors in the program switch (day) { // Case case 1: // this is case value 1 dayString = &quot;It&#39;s Monday today.&quot;; // this is the statement that prints out if the day value matches case #1 value break; // this is the break statement (THIS IS OPTIONAL, but I included it) // Case case 2: // this is case value 2 dayString = &quot;It&#39;s Tuesday today.&quot;; // this is the statement that prints out if the day value matches case #2 value break; // Case case 3: // this is case value 3 dayString = &quot;It&#39;s Wednesday today.&quot;; // this is the statement that prints out if the day value matches case #3 value break; // Case case 4: // this is case value 4 dayString = &quot;It&#39;s Thursday today.&quot;; // this is the statement that prints out if the day value matches case #4 value break; // Case case 5: // this is case value 5 dayString = &quot;It&#39;s Friday today.&quot;; // this is the statement that prints out if the day value matches case #5 value break; // Case case 6: // this is case value 6 dayString = &quot;It&#39;s Saturday today.&quot;; // this is the statement that prints out if the day value matches case #6 value break; // Case case 7: // this is case value 7 dayString = &quot;It&#39;s Sunday today.&quot;; // this is the statement that prints out if the day value matches case #7 value break; // we can continue to add as many case statements as we want (I stopped since there are only 7 days of the week) but make sure the number of cases is relevant to your program // This is the default case for when the case statements don&#39;t apply default: dayString = &quot;That&#39;s not a day bro.&quot;; // this is the statement that prints out if the day value doesn&#39;t match any of the case values } System.out.println(dayString); . It&#39;s Friday today. . De Morgan&#39;s Law . This law came after the man named Augustus De Morgan who developed it in the 1800s. The law states how to determine what the code will execute when negation rules are applied. For example, if a and b are both boolean values, then: . !(a &amp;&amp; b) is equivalent to !a || !b | !(a || b) is equivalent to !a &amp;&amp; !b | . The following negation conditions will also apply under De Morgan&#39;s law: . &lt; becomes &gt;= | &quot;&gt;&quot; becomes &lt;= | == becomes != | &lt;= becomes &gt; | = becomes &lt; | != becomes == | . String state = &quot;HI&quot;; // !(a || b) is equivalent to !a &amp;&amp; !b if (!(state.equals(&quot;TX&quot;) || state.equals(&quot;HI&quot;))) { System.out.println(&quot;The state is not Texas or Hawaii&quot;); } else { System.out.println(&quot;The state is either Texas or Hawaii&quot;); } // !(a &amp;&amp; b) is equivalent to !a || !b if (!(state.equals(&quot;TX&quot;) &amp;&amp; state.equals(&quot;HI&quot;))) { System.out.println(&quot;The state is either Texas or Hawaii&quot;); } else { System.out.println(&quot;The state is not Texas or Hawaii&quot;); } . The state is either Texas or Hawaii The state is either Texas or Hawaii .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/09/08/boolean.html",
            "relUrl": "/2022/09/08/boolean.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Say Cool Kids&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: System.out.print(&quot;Cool Kids!&quot;); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Say Cool Kids 0 - Quit - 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Option A Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Option B Code.org learning Follow the Neighborhood lessons and work through 11 to 15 lessons. | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/unit/2",
            "relUrl": "/unit/2",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Fastpages Notes",
            "content": "Notes . Data Types . In data types, there are both Primitive Types in Java and Wrapper Classes. | To identify if a data type is primitive or not, you must check its capitalization. Primitive types will not be capitalized (for example: int, boolean, char, byte, long) whereas Wrapper Classes will be capitalized (for example: Int, Double, Boolean, String) | . | . Primitive Data Input . Uses the java scanner for console input | . Primitive Data Output . Descriptions of the mathematical operations combine to form result of the operation. | Primitive types usually aren’t alone and will have primitive type doubles and/or wrapper class double. | . Java Objects (Code.org Key Learnings) . can create a new object without using variables | import the java scanner along with whatever else you need to create certain functions | 2D array seen in java objects notebook with the color names in one column (1D), and the color codes in the other column (another 1D) | static means its not part of the object just in the class definition | . | static public void main(String[] args) used to drive a class | . | new Menu(); contains while loop within it to restart the menu until we quit the program with the 0 input | . | The extends feature in java is used to extend a class in order for the subclass (child) to inherit from the superclass (parent) | To create a new object: specify the class name, followed by the object name, and use the keyword new | use main.java | Use constructors to initialize objects and set some object attributes constructors can have as many parameters as needed | . | . Graphic User Interface (GUI) . can inherit properties from another | color is once again being randomized | seeing usage of frame.set, frame.add to show use of java objects dot notation is the referencing of object | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/08/28/fastpages-notes.html",
            "relUrl": "/markdown/2022/08/28/fastpages-notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Primitives Notebook",
            "content": "import java.util.Scanner; // defining the class public class Main { // use of wrapper class to use String to later print out the output public static void main(String[] args) { // use of primitives char operator; Double number1, number2, result; // create an object of Scanner class Scanner input = new Scanner(System.in); // ask users to enter operator System.out.println(&quot;Choose an operator: +, -, *, or /&quot;); operator = input.next().charAt(0); // ask users for input numbers System.out.println(&quot;Enter first number&quot;); number1 = input.nextDouble(); System.out.println(&quot;Enter second number&quot;); number2 = input.nextDouble(); switch (operator) { // performs addition between input numbers case &#39;+&#39;: result = number1 + number2; System.out.println(number1 + &quot; + &quot; + number2 + &quot; = &quot; + result); break; // performs subtraction between input numbers case &#39;-&#39;: result = number1 - number2; System.out.println(number1 + &quot; - &quot; + number2 + &quot; = &quot; + result); break; // performs multiplication between input numbers case &#39;*&#39;: result = number1 * number2; System.out.println(number1 + &quot; * &quot; + number2 + &quot; = &quot; + result); break; // performs division between input numbers case &#39;/&#39;: result = number1 / number2; System.out.println(number1 + &quot; / &quot; + number2 + &quot; = &quot; + result); break; default: System.out.println(&quot;Invalid operator!&quot;); break; } input.close(); } } // IJava run command Main.main(null); . Choose an operator: +, -, *, or / Enter first number Enter second number 5.0 + 6.0 = 11.0 .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/08/25/primitives.html",
            "relUrl": "/jupyter/2022/08/25/primitives.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Bash and Installation Checks",
            "content": "Python, Java, and Jupyter Check . python --version python2 --version java --version javac --version jupyter --version jupyter kernelspec list . Python 3.9.12 Python 2.7.18 openjdk 17.0.4 2022-07-19 OpenJDK Runtime Environment Temurin-17.0.4+8 (build 17.0.4+8) OpenJDK 64-Bit Server VM Temurin-17.0.4+8 (build 17.0.4+8, mixed mode, sharing) javac 17.0.4 Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/sri/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e bash /Users/sri/Library/Jupyter/kernels/bash java /Users/sri/Library/Jupyter/kernels/java javascript /Users/sri/Library/Jupyter/kernels/javascript python3 /Users/sri/opt/anaconda3/share/jupyter/kernels/python3 . Conda Installation Check . test=$(conda list | grep -c &quot;jupyter&quot;) if [ $test -gt 0 ]; then echo &quot;Conda and jupyter were correctly installed.&quot; else echo &quot;Conda and jupter were incorrectly installed.&quot; fi . Conda and jupyter were correctly installed. . Project Directory Checks . echo &quot;Creating a project directory and project&quot; cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... making a new directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Creating a project directory and project Directory /Users/sri/vscode exists. Directory /Users/sri/vscode/APCSP exists. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/08/25/bash-and-check.html",
            "relUrl": "/2022/08/25/bash-and-check.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Sprint 1 Hacks | Tools & Equipment",
            "content": "Hacks . Fastpages . Python Jupyter Notebook | Java Notebook | . . Java Project . . Initial Code Commit | . GitHub Insights . Insights for Fastpages | Insights for Java Project | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/08/22/sprint1hacks.html",
            "relUrl": "/markdown/2022/08/22/sprint1hacks.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Python Notebook",
            "content": "print(&quot;My Python NoteBook&quot;) . My Python NoteBook .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/08/18/python-notebook.html",
            "relUrl": "/2022/08/18/python-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello world!&quot;); . Hello world! .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/08/18/java-notebook.html",
            "relUrl": "/jupyter/2022/08/18/java-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pranaviinukurti.github.io/fastpagescsa/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pranaviinukurti.github.io/fastpagescsa/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}