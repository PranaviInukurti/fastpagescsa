{
  
    
        "post0": {
            "title": "UNIT 3, 4, 5 NOTES",
            "content": "Boolean Expressions . represent logic and tell whether something is true or false | operators used for boolean | logical operators &amp;&amp; means and | || means or | ! means not | . | De Morgan&#39;s Law help simplify boolean expressions two laws to it | truth tables are a good war to visualize boolean expressions | . | to compare objects, use the == for aliases for the same objects or to see if it is null or .equals() to see if the attribute is the same for two objects | . Iteration . simplifies code by allowing it to repeat itself | while loops have two portions: the boolean expression and the brackets that have some code in them the boolean expression is checked before the loop starts every time the loop ends and is about to start anew | . | changes conditions again and again until returns false and ends the while loop | iterates over numerous elements | . | for loops has three portions: initialization, test condition, and change for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . | when the loop condition is false, execution will continue at the next statement after the body of the loop. | strings can also be manipulated through the use of iteration String name = &quot;CodeCodeCode&quot;; | . for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . - nested iteration is where there is a loop within a loop - similar to nested conditionals . for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . - there are also nested while loops - aren&#39;t very practical though - for each loops are similar to for loops - three portions to it - array, item, dataType . public class ForEachLoops { . public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } . } } . known as the enhanced for loops | . Writing Classes . class is a blueprint to create objects | object is the instances of a class | public access means anyone can access the class | private means that there is restricted access to the class | constructors purpose is to initialize instance variables when object&#39;s called set an initial object state and initial instance variables | default constructors has no parameters | . | three steps to creating and calling a method declare object of the class in the main method | call the method (whatever method you want) | write the method&#39;s header and body code | . | parameters used when creating a method when method is called, pass parameters that are then saved as parameter variables | . | | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/18/objects.html",
            "relUrl": "/jupyter/2022/10/18/objects.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "ArrayLists Lesson",
            "content": "Arrays vs ArrayLists . The main difference between an array and an arraylist is that arraylists can grow and shrink whereas arrays can&#39;t. Arrays have a fixed length so once it is full, more elements cannot be added. If elements are removed from an Arrays, the maximum about of space will not shrink. However, ArrayLists can adjust dynamically in regards to elements. Essentially in Java, ArrayLists can: . ArrayList can grow and shrink based on the whether you add / remove elements | ArrayList can contain duplicate elements | ArrayList maintains the insertion order (elements appear in the same order in which they are inserted) | . Methods of ArrayLists . addAll(int index, Collection collection) Adds all elements in the above collection to the list; and when a parameter is passed, it adds all the elements of the collection to the end | . | add(int index, element) Adds an element at a specific spot in the list; but when a parameter is passed, it will just add the element at the end | . | clear() Removes all the elements in the list | Reference of the list created is still stored. | . | containsAll(Collection collection) Checks if the list contains all the elements in the mentioned collection | . | contains(element) Checks if the list contains the mentioned element Returns true if the element is in the list | . | . | equals(element) Compares the equality of the mentioned element with other present elements | . | get(int index) Returns elements at the specified index | . | hashCode() Returns the hashcode (an integer value that is associated with each object in Java language) value of the list | . | indexOf(element) Returns the first-placed of the mentioned element Returns -1 if the element isn&#39;t prevalent in the list | . | . | isEmpty() Checks if the list is empty or not Returns true if the list is empty | Returns false if the list isn&#39;t empty | . | . | lastIndexOf(element) Returns the last-placed of the mentioned element Returns -1 if the element isn&#39;t prevalent in the list | . | . | remove(element) Removes first-placed of the mentioned element in the list | . | remove(int index) Removes an element from the specified index and shifts subsequent elements to the left along with decreasing indexes by 1 | . | set(int index, element) Replaces elements at a given index with the new element | Returns the newly replaced element as a new element | . | size() Returns the list&#39;s size | . | sort(Comparator comp) Sorts the elements in the list based on the mentioned comparator | . | . ArrayList Example: Possible Data Structure for Students Signed Up for Website . import java.util.*; public class JavaExample { public static void main(String args[]) { /* Creating ArrayList of type &quot;String&quot;*/ ArrayList&lt;String&gt; obj = new ArrayList&lt;String&gt;(); /*dds elements to the ArrayList*/ obj.add(&quot;Rebecca&quot;); obj.add(&quot;Saathvika&quot;); obj.add(&quot;Sarayu&quot;); obj.add(&quot;Prisha&quot;); obj.add(&quot;William&quot;); obj.add(&quot;Vidhi&quot;); obj.add(&quot;Shreya&quot;); obj.add(&quot;Tianbin&quot;); // Displaying elements System.out.println(&quot;Starting Students Signed Up:&quot;); for(String str:obj) System.out.println(str); System.out.println(&quot;the students are added to the arrayList&quot;); /* Adds element at the stated index in the list * obj.add(0, &quot;Rohan&quot;) - Adding element &quot;Rohan&quot; to the first position in the list * obj.add(1, &quot;Surya&quot;) - Adding element &quot;Surya&quot; to the second position in the list */ obj.add(0, &quot;Rohan&quot;); obj.add(1, &quot;Surya&quot;); // Displaying elements of the new list System.out.println(&quot;Updated Students List (Additions):&quot;); for(String str:obj) System.out.println(str); //Remove elements from the ArrayList obj.remove(&quot;Sarayu&quot;); //Removes &quot;Sarayu&quot; from the list obj.remove(&quot;Saathvika&quot;); //Removes &quot;Saathvika&quot; from the list // This displays elements for the newer list System.out.println(&quot;Updated Students List (Removals):&quot;); for(String str:obj) System.out.println(str); //Removes the element from the index of the list obj.remove(1); //Removes the second element from the list // Displaying elements of the final most/most newly updated list System.out.println(&quot;Final Students List:&quot;); for(String str:obj) System.out.println(str); } } JavaExample.main(null); . Starting Students Signed Up: Rebecca Saathvika Sarayu Prisha William Vidhi Shreya Tianbin the students are added to the arrayList Updated Students List (Additions): Rohan Surya Rebecca Saathvika Sarayu Prisha William Vidhi Shreya Tianbin Updated Students List (Removals): Rohan Surya Rebecca Prisha William Vidhi Shreya Tianbin Final Students List: Rohan Rebecca Prisha William Vidhi Shreya Tianbin .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/06/arraylists.html",
            "relUrl": "/jupyter/2022/10/06/arraylists.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Chuck Norris API",
            "content": "import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.net.http.HttpClient; import java.net.URI; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://chuck-norris-jokes.p.rapidapi.com/de/jokes/random&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;644e68648emsh4cd27460fc55318p1db393jsn3ea02f46215c&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;chuck-norris-jokes.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;joke&#34;:&#34;Beim Spazierengehen wurde neulich der Blitz von Chuck Norris getroffen&#34;} .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/10/04/chucknorris.html",
            "relUrl": "/2022/10/04/chucknorris.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Trimester 1 Project Passion",
            "content": "Clothes (Pranavi) . Is essentially modeled after a typical shopping website (Amazon, Walmart, etc.). Each image has it&#39;s name and the price. If the user clicks on the image though, the website redirects the user to a new page with a better description of the product along with the price and other details. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/10/03/project-passion.html",
            "relUrl": "/jupyter/2022/10/03/project-passion.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Arrays and Images",
            "content": "Saving PNG to GIF . import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Image to ASCII Conversion . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int wScale, int hScale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (wScale/100.0) + 0.5); int height = (int) (this.height * (hScale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public void changeColor( String colorScale, String outFileName) { BufferedImage image = null; try { File input = new File(this.inFile); image = ImageIO.read(input); width = image.getWidth(); height = image.getHeight(); for(int i=0; i&lt;height; i++) { for(int j=0; j&lt;width; j++) { Color c = new Color(image.getRGB(j, i)); int red = (int)(c.getRed() * 0.299); int green = (int)(c.getGreen() * 0.587); int blue = (int)(c.getBlue() *0.114); Color newColor = new Color(red+green+blue, red+green+blue, red+green+blue); if(colorScale.equals(&quot;gray&quot;)){ newColor = new Color(red+green+blue, red+green+blue, red+green+blue); }else if (colorScale.equals(&quot;red&quot;)){ newColor = new Color(red+green+blue, 0, 0); }else if (colorScale.equals(&quot;blue&quot;)){ newColor = new Color(0, 0, red+green+blue); }else if (colorScale.equals(&quot;green&quot;)){ newColor = new Color(0, red+green+blue, 0); } image.setRGB(j,i,newColor.getRGB()); } } File output = new File(this.outDir + colorScale + outFileName); ImageIO.write(image, &quot;png&quot;, output); } catch (Exception e) { return; } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(22,10); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(20,10); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics monaLisaGray = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisaGray.printStats(&quot;Original&quot;); monaLisaGray.changeColor(&quot;gray&quot;,&quot;MonaLisa.png&quot;); Pics monaLisaRed = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisaRed.printStats(&quot;Original&quot;); monaLisaRed.changeColor(&quot;red&quot;,&quot;MonaLisa.png&quot;); Pics monaLisaBlue = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisaBlue.printStats(&quot;Original&quot;); monaLisaBlue.changeColor(&quot;blue&quot;,&quot;MonaLisa.png&quot;); Pics monaLisaGreen = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisaGreen.printStats(&quot;Original&quot;); monaLisaGreen.changeColor(&quot;green&quot;,&quot;MonaLisa.png&quot;); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 11496 86x41 images/tmp/MonaLisa.png Original: 39392 302x265 images/pumpkin.png Scaled: 3044 60x27 images/tmp/pumpkin.png Original: 499298 389x413 images/MonaLisa.png Original: 499298 389x413 images/MonaLisa.png Original: 499298 389x413 images/MonaLisa.png Original: 499298 389x413 images/MonaLisa.png .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/unit/6",
            "relUrl": "/unit/6",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "1st Trimester Project - DNHS Market",
            "content": "Program Design . Brainwrite . The goal of this website is to provide a platform that is convenient and reliable for students in their purchases related to school. Whether it be school merch, or even help with academics, our website aims to provide aid to all of the Del Norte school body. | The plan is to have them log in with their student account at the start to sign in as their student profile and get the help they need through our website. | The website will not be directly associated with our school due to the legality issues surrounding that entire situation. | . Project Wireframe . We used a Figma to brainstorm visual representations and ideas of what we wanted our website to look like. | We will continue to edit this Figma as the trimester goes on and we edit our plans on the visuals | . Project Workflow . We came up with a workflow diagram to help plan out the different pages of our website and how to attack them. | As we come up with more and more ideas for our website, we will be editing this diagram to maintain a level of organization and planning for our project. | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/09/26/program-design.html",
            "relUrl": "/markdown/2022/09/26/program-design.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fibonacci Hacks",
            "content": "Abstract Fibonacci . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } } . Fibonacci - For and While Loop (Extends) . In this display, we see how firstTerm = 0 and secondTerm = 1 initially as the first two digits in the output of the Fibonacci series. We use the for loop to print the firstTerm and secondTerm, add these two terms to compute nextTerm, and assign whatever value we got to nextTerm. We can also create a fibonacci sequence with a while loop. The program is essentially the same as the previous program. Although both programs work well, using a for loop would be better since the number of iterations from 1 to n is known. . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } //Fibo.main(null); public class FiboWhile extends Fibo { //extending the Fibo class public void print() { //printing out all of the things needed for this new class System.out.println(&quot;Using Fibowhile &quot; ); // title System.out.println(&quot;Init method = &quot; + this.name); // init method name System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); // prints out the 20th term, list, and hashmap System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); int i = 0; // setting up int i as 0 initially while(i&lt;this.size){ // while loop that uses .getNthSeq from parent class System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); i++; } } static public void main(String[] args) { // setting the print for the FiboWhile and not Fibo Fibo fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); // running the FiboWhile class . Using Fibowhile Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fibonacci with Recursion (Extends) . To prevent repeating lines of code, we can use recursion to make our code and life simpler. . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboRec recursion = new FiboRec(); recursion.print(); } } public class FiboRec extends Fibo { // extending FiboRec new class from parent class Fibo public int fibCalc (int i) { // using the recursion to produce Fibonacci sequence, the function fibCalc calls upon itself if (i &lt;= 1) { return i; } else { return fibCalc(i-1) + fibCalc(i-2); } } public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.fibCalc(i)); } } static public void main(String[] args) { // printing out this new class FiboRec Fibo recursion = new FiboRec(); recursion.print(); } } FiboRec.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = 0 fibonacci Sequence 2 = 1 fibonacci Sequence 3 = 1 fibonacci Sequence 4 = 2 fibonacci Sequence 5 = 3 fibonacci Sequence 6 = 5 fibonacci Sequence 7 = 8 fibonacci Sequence 8 = 13 fibonacci Sequence 9 = 21 fibonacci Sequence 10 = 34 fibonacci Sequence 11 = 55 fibonacci Sequence 12 = 89 fibonacci Sequence 13 = 144 fibonacci Sequence 14 = 233 fibonacci Sequence 15 = 377 fibonacci Sequence 16 = 610 fibonacci Sequence 17 = 987 fibonacci Sequence 18 = 1597 fibonacci Sequence 19 = 2584 fibonacci Sequence 20 = 4181 .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/09/26/fibo-hacks.html",
            "relUrl": "/jupyter/2022/09/26/fibo-hacks.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "JavaScript Hacks",
            "content": "console.log(&quot;Welcome to Pranavi&#39;s Javascript&quot;); function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } // define a function to hold data for a Person function Person(name, grade, role) { this.name = name; this.grade = grade; this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, grade: this.grade, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;NA&quot;, &quot;Teacher&quot;); // object type is easy to work with in JavaScript // define a student Array of Person(s) var students = [ new Person(&quot;Pranavi&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Madhumita&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;John&quot;, &quot;Sophomor&quot;, &quot;Student&quot;), new Person(&quot;Shraddha&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Meena&quot;, &quot;Senior&quot;, &quot;Student&quot;), new Person(&quot;Bob&quot;, &quot;Junior&quot;, &quot;Student&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students scrumTeam = new Classroom(teacher, students); // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of scrumTeam.classroom for (var row in scrumTeam.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].grade + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + scrumTeam.classroom[row].role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(scrumTeam._toHtml()); . Welcome to Pranavi&#39;s Javascript . NameGradeRole . Mr M | NA | Teacher | Pranavi | Senior | Student | Madhumita | Senior | Student | John | Sophomor | Student | Shraddha | Senior | Student | Meena | Senior | Student | Bob | Junior | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/09/19/TT-js_tutorial.html",
            "relUrl": "/jupyter/2022/09/19/TT-js_tutorial.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "FRQ 1 (Question 1)",
            "content": "Part a . public int scoreGuess (String guess) { int count = 0 for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length() * guess.length(); } . Part b . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/09/14/free-response-questions.html",
            "relUrl": "/jupyter/2022/09/14/free-response-questions.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Iteration Mini-Lab",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot; Monkey 0&quot;, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; Monkey 1&quot;, &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; Monkey 2&quot;, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; Monkey 3&quot;, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; Monkey 4&quot;, &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, { &quot; Monkey 5&quot;, &quot; (ಠ益ಠლ) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; int rowCount = 0; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); for (int col = 0; col &lt; monkeys[rowCount].length; col++) { for (int row = 0; row &lt; monkeyCount; row++) { //cycles through &quot;cells&quot; of 2d array // prints specific part of the monkey from the column System.out.print(monkeys[row][col] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } rowCount += 1; //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 6 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 Monkey 4 Monkey 5 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) (ಠ益ಠლ) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ _/ _ 5 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 Monkey 4 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 Monkey 3 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... Monkey 0 Monkey 1 Monkey 2 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... Monkey 0 Monkey 1 ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... Monkey 0 ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/09/13/iteration.html",
            "relUrl": "/2022/09/13/iteration.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Focus and Habits",
            "content": "Focus and Habits . Blog Purpose . The purpose this blog is to illustrate my passion for all things biology while also showing off all of the programming skills I have learned and will learn throughout the course of this year. Although I know what the purpose of my blog is, I still wish to maintain some goals in order to keep on task and stay organized while building this blog. Some of the goals I have for this blog are: . maintain a minimalist, but aesthetic style for the entire blog formatting | make sure to have a realistic and maintainable organization to the blog | include projects and/or news that I find interesting that are going on in the biology field | have a separate place to keep all of my CSA projects and assignments | . Psychology and the Good Life . In this video, Laura Santos talks about the affects that Covid-19 had on us as a society and how she could see the direct impacts of this based on her observations of the students she saw on campus. . Takeaways from the Video . Get Social The Covid-19 hit many people hard because it stole one of the primary sources of happiness that we humans get our behavior from; a social and communicative environment. By engaging with more and more people, we are able to find more and more happiness as well. Afterall, the best coders are the happiest coders. | . | Give Thanks In order to maintain a stable and more positive well-being, we must constantly remind ourselves about all of the things we are grateful for. Although it might seem cheesy or corny at first, stopping to consider the good things in our life brightens our mindset and relays a more positive outlook on our life in general. This also allows us to step away from frustrations (helping our problem-solving skills as well). | . | Be In The Moment Focusing on the present is always able to make us feel better since it allows us to stop worrying about being so “busy” (something that is highly encourage in America and especially in our school). Even the simple practice of sitting with our more negative emotions puts into perspective that these feelings are temporary and don’t need to have so much control over our actions and behavior. | . | Rest And Move Sleep has always been beneficial to our bodily functions, but even more so for our mental stability. In order to maintain a sense of happiness, it is important to have a healthy and consistent sleep schedule. Even eight hours of rest sets a foundation that all happy habits rely on. | . | Be Kind Studies show that we get more happiness from doing nice things for other people than to ourselves. People who are more happy with their lives usually are the ones focusing more on bettering the lives of people less fortunate than themselves. The boost in mood that we get from random acts of kindness allows us to feel better without worrying about harming anyone else. | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/09/10/focus-and-habits.html",
            "relUrl": "/markdown/2022/09/10/focus-and-habits.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Docker Server",
            "content": "",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/09/10/docker-server.html",
            "relUrl": "/markdown/2022/09/10/docker-server.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Conditional Statements",
            "content": "If Statement . // will always print out true as the output since 20 will always be greater than 18 if (20 &gt; 18) { // condition in the parenthesis // the code that is executed if the condition is proved true (the return) System.out.println(&quot;True, 20 is greater than 18&quot;); } // if statements can also be used to test and/or compare variables int a = 20; int b = 18; if (a &gt; b) { System.out.println(&quot;True, variable a is greater than variable b&quot;); } . True, 20 is greater than 18 True, variable a is greater than variable b . Else Statement . // will always print out &quot;Good Bye&quot; since the time is 20 and 20 is always greater than 18, which means the condition is alwaysfalse int time = 20; if (time &lt; 18) { // the condition is in the parenthesis System.out.println(&quot;Good day.&quot;); // the return if the code executed is true under the condition } else { System.out.println(&quot;Good bye.&quot;); // the return if the code executed is false under the condition mentioned } . Good bye. . Else If Statement . // will always print out you won since 17 is greater than 10 and 15 int score = 17; if (score &lt; 10) { // in the parenthesis is the first condition System.out.println(&quot;You lost the game.&quot;); // what return follows if the executed code is true } else if (score &lt; 15) { // in the parenthesis is the second condition System.out.println(&quot;You might win the game.&quot;); // what return follows if the executed code is false for the first condition but true for the second condition } else { System.out.println(&quot;You won the game.&quot;); // what return follows if the executed code is false for both the first and second condition } . You won the game. . If-ElseIf Statements . The if statement is the first condition in the Java program that starts the management of the return. If this first condition in the if statement is true, the program will print out the statement coded inside it. If the condition is false, the execution moves on to the else condition and prints out the statement written inside this condition if it is true. If not, then the program repeats the process of moving on and checking the next condition until the code is executed. . int x; x=105; if (x &lt;= 10) { // condition 1 in the parenthesis System.out.println(&quot;X is less than or equal to 10, it is a pretty small number!&quot;); // if the value of x is less than or equal to 10, the system will return this statement } else if (x &lt;= 20) { // condition 2 in the parenthesis System.out.println(&quot;X is less than or equal to 20!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 20, the system will print out this statement } else if (x &lt;= 30) { // condition 3 in the parenthesis System.out.println(&quot;X is less than or equal to 30!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 30, the system will print out this statement } else if (x &lt;= 40) { // condition 4 in the parenthesis System.out.println(&quot;X is less than or equal to 40!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 40, the system will print out this statement } else if (x &lt;= 50) { // condition 5 in the parenthesis System.out.println(&quot;X is less than or equal to 50!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 50, the system will print out this statement } else if (x &lt;= 60) { // condition 6 in the parenthesis System.out.println(&quot;X is less than or equal to 60!&quot;); // if the value for x fails to meet all of the above conditions, but is less than or equal to 60, the system will print out this statement } else { // if the value for x fails to meet all of the above conditions, it returns the statement below System.out.println(&quot;X is greater than 60, it&#39;s a pretty big number!&quot;); } . X is greater than 60, it&#39;s a pretty big number! . Switch-Case Statements . In switch-case statements, it is possible to write as many cases as you want, as long as they are all relevant to the problem. Break statements and default statements are both optional; but if you include the default statement in some place besides the end of the program, you must make sure that the break statement follows right after the default statement. Variables aren&#39;t allowed in these cases so the value for a case must be literal or constant. . int day = 5; String dayString; // This is the switch statement that includes what the data type is, in this case it is int. The value written above must be of the same data type to prevent any errors in the program switch (day) { // Case case 1: // this is case value 1 dayString = &quot;It&#39;s Monday today.&quot;; // this is the statement that prints out if the day value matches case #1 value break; // this is the break statement (THIS IS OPTIONAL, but I included it) // Case case 2: // this is case value 2 dayString = &quot;It&#39;s Tuesday today.&quot;; // this is the statement that prints out if the day value matches case #2 value break; // Case case 3: // this is case value 3 dayString = &quot;It&#39;s Wednesday today.&quot;; // this is the statement that prints out if the day value matches case #3 value break; // Case case 4: // this is case value 4 dayString = &quot;It&#39;s Thursday today.&quot;; // this is the statement that prints out if the day value matches case #4 value break; // Case case 5: // this is case value 5 dayString = &quot;It&#39;s Friday today.&quot;; // this is the statement that prints out if the day value matches case #5 value break; // Case case 6: // this is case value 6 dayString = &quot;It&#39;s Saturday today.&quot;; // this is the statement that prints out if the day value matches case #6 value break; // Case case 7: // this is case value 7 dayString = &quot;It&#39;s Sunday today.&quot;; // this is the statement that prints out if the day value matches case #7 value break; // we can continue to add as many case statements as we want (I stopped since there are only 7 days of the week) but make sure the number of cases is relevant to your program // This is the default case for when the case statements don&#39;t apply default: dayString = &quot;That&#39;s not a day bro.&quot;; // this is the statement that prints out if the day value doesn&#39;t match any of the case values } System.out.println(dayString); . It&#39;s Friday today. . De Morgan&#39;s Law . This law came after the man named Augustus De Morgan who developed it in the 1800s. The law states how to determine what the code will execute when negation rules are applied. For example, if a and b are both boolean values, then: . !(a &amp;&amp; b) is equivalent to !a || !b | !(a || b) is equivalent to !a &amp;&amp; !b | . The following negation conditions will also apply under De Morgan&#39;s law: . &lt; becomes &gt;= | &quot;&gt;&quot; becomes &lt;= | == becomes != | &lt;= becomes &gt; | = becomes &lt; | != becomes == | . String state = &quot;HI&quot;; // !(a || b) is equivalent to !a &amp;&amp; !b if (!(state.equals(&quot;TX&quot;) || state.equals(&quot;HI&quot;))) { System.out.println(&quot;The state is not Texas or Hawaii&quot;); } else { System.out.println(&quot;The state is either Texas or Hawaii&quot;); } // !(a &amp;&amp; b) is equivalent to !a || !b if (!(state.equals(&quot;TX&quot;) &amp;&amp; state.equals(&quot;HI&quot;))) { System.out.println(&quot;The state is either Texas or Hawaii&quot;); } else { System.out.println(&quot;The state is not Texas or Hawaii&quot;); } . The state is either Texas or Hawaii The state is either Texas or Hawaii .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/09/08/boolean.html",
            "relUrl": "/2022/09/08/boolean.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Say Cool Kids&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: System.out.print(&quot;Cool Kids!&quot;); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Say Cool Kids 0 - Quit - 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Option A Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Option B Code.org learning Follow the Neighborhood lessons and work through 11 to 15 lessons. | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/unit/2",
            "relUrl": "/unit/2",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Fastpages Notes",
            "content": "Notes . Data Types . In data types, there are both Primitive Types in Java and Wrapper Classes. | To identify if a data type is primitive or not, you must check its capitalization. Primitive types will not be capitalized (for example: int, boolean, char, byte, long) whereas Wrapper Classes will be capitalized (for example: Int, Double, Boolean, String) | . | . Primitive Data Input . Uses the java scanner for console input | . Primitive Data Output . Descriptions of the mathematical operations combine to form result of the operation. | Primitive types usually aren’t alone and will have primitive type doubles and/or wrapper class double. | . Java Objects (Code.org Key Learnings) . can create a new object without using variables | import the java scanner along with whatever else you need to create certain functions | 2D array seen in java objects notebook with the color names in one column (1D), and the color codes in the other column (another 1D) | static means its not part of the object just in the class definition | . | static public void main(String[] args) used to drive a class | . | new Menu(); contains while loop within it to restart the menu until we quit the program with the 0 input | . | The extends feature in java is used to extend a class in order for the subclass (child) to inherit from the superclass (parent) | To create a new object: specify the class name, followed by the object name, and use the keyword new | use main.java | Use constructors to initialize objects and set some object attributes constructors can have as many parameters as needed | . | . Graphic User Interface (GUI) . can inherit properties from another | color is once again being randomized | seeing usage of frame.set, frame.add to show use of java objects dot notation is the referencing of object | . | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/08/28/fastpages-notes.html",
            "relUrl": "/markdown/2022/08/28/fastpages-notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Primitives Notebook",
            "content": "import java.util.Scanner; // defining the class public class Main { // use of wrapper class to use String to later print out the output public static void main(String[] args) { // use of primitives char operator; Double number1, number2, result; // create an object of Scanner class Scanner input = new Scanner(System.in); // ask users to enter operator System.out.println(&quot;Choose an operator: +, -, *, or /&quot;); operator = input.next().charAt(0); // ask users for input numbers System.out.println(&quot;Enter first number&quot;); number1 = input.nextDouble(); System.out.println(&quot;Enter second number&quot;); number2 = input.nextDouble(); switch (operator) { // performs addition between input numbers case &#39;+&#39;: result = number1 + number2; System.out.println(number1 + &quot; + &quot; + number2 + &quot; = &quot; + result); break; // performs subtraction between input numbers case &#39;-&#39;: result = number1 - number2; System.out.println(number1 + &quot; - &quot; + number2 + &quot; = &quot; + result); break; // performs multiplication between input numbers case &#39;*&#39;: result = number1 * number2; System.out.println(number1 + &quot; * &quot; + number2 + &quot; = &quot; + result); break; // performs division between input numbers case &#39;/&#39;: result = number1 / number2; System.out.println(number1 + &quot; / &quot; + number2 + &quot; = &quot; + result); break; default: System.out.println(&quot;Invalid operator!&quot;); break; } input.close(); } } // IJava run command Main.main(null); . Choose an operator: +, -, *, or / Enter first number Enter second number 5.0 + 6.0 = 11.0 .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/08/25/primitives.html",
            "relUrl": "/jupyter/2022/08/25/primitives.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Bash and Installation Checks",
            "content": "Python, Java, and Jupyter Check . python --version python2 --version java --version javac --version jupyter --version jupyter kernelspec list . Python 3.9.12 Python 2.7.18 openjdk 17.0.4 2022-07-19 OpenJDK Runtime Environment Temurin-17.0.4+8 (build 17.0.4+8) OpenJDK 64-Bit Server VM Temurin-17.0.4+8 (build 17.0.4+8, mixed mode, sharing) javac 17.0.4 Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e /Users/sri/.vscode/extensions/ms-toolsai.jupyter-2022.7.1102252217/temp/jupyter/kernels/python3106jvsc74a57bd0b0fa6594d8f4cbf19f97940f81e996739fb7646882a419484c72d19e05852a7e bash /Users/sri/Library/Jupyter/kernels/bash java /Users/sri/Library/Jupyter/kernels/java javascript /Users/sri/Library/Jupyter/kernels/javascript python3 /Users/sri/opt/anaconda3/share/jupyter/kernels/python3 . Conda Installation Check . test=$(conda list | grep -c &quot;jupyter&quot;) if [ $test -gt 0 ]; then echo &quot;Conda and jupyter were correctly installed.&quot; else echo &quot;Conda and jupter were incorrectly installed.&quot; fi . Conda and jupyter were correctly installed. . Project Directory Checks . echo &quot;Creating a project directory and project&quot; cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... making a new directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Creating a project directory and project Directory /Users/sri/vscode exists. Directory /Users/sri/vscode/APCSP exists. .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/08/25/bash-and-check.html",
            "relUrl": "/2022/08/25/bash-and-check.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Sprint 1 Hacks | Tools & Equipment",
            "content": "Hacks . Fastpages . Python Jupyter Notebook | Java Notebook | . . Java Project . . Initial Code Commit | . GitHub Insights . Insights for Fastpages | Insights for Java Project | .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/markdown/2022/08/22/sprint1hacks.html",
            "relUrl": "/markdown/2022/08/22/sprint1hacks.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Python Notebook",
            "content": "print(&quot;My Python NoteBook&quot;) . My Python NoteBook .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/2022/08/18/python-notebook.html",
            "relUrl": "/2022/08/18/python-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Java Notebook",
            "content": "System.out.println(&quot;Hello world!&quot;); . Hello world! .",
            "url": "https://pranaviinukurti.github.io/fastpagescsa/jupyter/2022/08/18/java-notebook.html",
            "relUrl": "/jupyter/2022/08/18/java-notebook.html",
            "date": " • Aug 18, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pranaviinukurti.github.io/fastpagescsa/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pranaviinukurti.github.io/fastpagescsa/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}